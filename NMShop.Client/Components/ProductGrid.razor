@using NMShop.Shared.Models;
@using NMShop.Client.Services
@inject NavigationManager Navigation;
@inject ClientDataProvider DataProvider

<div class="d-flex flex-column mud-width-full">

    @if (UsePagination && totalProducts == 0)
    {
        <MudText Typo="Typo.h5">К сожалению, такого у нас пока нет :(</MudText>
        <CustomOrderCard/>
    }

    <MudGrid Spacing="10">
        @foreach (ProductDto p in _products)
        {
            var (minPrice, minDiscountPrice) = p.GetMinPriceAndDiscount();
            bool willShowDiscountPrice = minDiscountPrice is not null && minDiscountPrice != 0 && minDiscountPrice < minPrice;

            <MudItem xs="6" lg="4" xl="3" Class="">
                <div @onclick="() => GoToProduct(p)" class="cursor-pointer pa-xs-1 pa-lg-4 pa-xl-6">

                    <div class="relative">
                        <MudImage Class="hovering mb-7" Src=@(p.Images.GetMainImageSrc()) ObjectFit="ObjectFit.Contain" ObjectPosition="ObjectPosition.Center" Style="aspect-ratio: 1 / 0.8; width: 100%; height: auto;" />

                        <div class="absolute d-flex" style="bottom: 0px; left: 0px; gap: 10px;">
                            @if (minDiscountPrice is not null)
                            {
                                <MudText Typo="Typo.body2" Style="border-radius: 8px; background-color: #ff6b3150;" Class="px-2 py-1">Sale</MudText>
                            }
                            @if (p.Gender == "Женский")
                            {
                                <MudText Typo="Typo.body2" Style="border-radius: 8px; background-color: #ff60b850;" Class="px-2 py-1">Женский</MudText>
                            }
                        </div>
                    </div>

                    <MudText Style="font-weight: 700; text-transform: uppercase;" Typo="Typo.h5">@p.Name</MudText>

                    @if (willShowDiscountPrice)
                    {
                        <MudText Typo="Typo.h6" Style="line-height: 100%;" Color="Color.Error">
                            от <MudText Inline="true" Typo="Typo.h6" Style="line-height: 100%; font-weight: 800;" Color="Color.Error">@minDiscountPrice.ToPreFormatedString()</MudText> ₽
                        </MudText>
                    }

                    <MudText Typo="Typo.body1" Color="Color.Dark" Style=@( "line-height: 100%; font-weight: 700;" + (willShowDiscountPrice ? "text-decoration: line-through; text-decoration-color: red;" : null))>от @minPrice.ToPreFormatedString() ₽</MudText>
                </div>
            </MudItem>
        }
    </MudGrid>

    @if (UsePagination && totalPages > 1)
    {
        <MudPagination @bind-SelectedPage="selectedPage"
                       Class="align-self-center my-3"
                       ShowFirstButton="true"
                       ShowLastButton="true"
                       SelectedChanged="PageChanged"
                       Count="totalPages"
                       Size="Size.Large" />
    }
</div>

@code {
    [Parameter]
    public ProductFilter Filter { get; set; }

    [Parameter]
    public EventCallback<int> OnProductCountChanged { get; set; }

    [Parameter]
    public bool UsePagination { get; set; } = false;

    private int selectedPage = 1;
    private int totalPages = 1;
    private int totalProducts = 0;
    private int pageSize = 12; 

    private ProductFilter _previousFilter;

    private IEnumerable<ProductDto> _products = new List<ProductDto>();

    protected override async Task OnParametersSetAsync()
    {
        if (!Filter.Equals(_previousFilter))
        {
            _previousFilter = Filter.Clone();
            selectedPage = 1;
            await LoadProducts();
        }
    }

    private async Task PageChanged(int page)
    {
        selectedPage = page;
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        try
        {
            var filterCopy = _previousFilter.Clone();

            if (UsePagination)
            {
                filterCopy.Skip = (selectedPage - 1) * pageSize;
                filterCopy.Take = pageSize;

                totalProducts = await DataProvider.GetFilteredProductsCount(_previousFilter);
                totalPages = (int)Math.Ceiling((double)totalProducts / pageSize);
            }

            _products = await DataProvider.GetFilteredProducts(filterCopy);

            if (UsePagination)
            {
                await OnProductCountChanged.InvokeAsync(totalProducts);
            }
        }
        catch (Exception e)
        {
            Console.Error.WriteLine(e);
        }
    }

    private void GoToProduct(ProductDto product)
    {
        Navigation.NavigateTo($"/catalog/{product.ProductType}/{product.Article}");
    }
}
