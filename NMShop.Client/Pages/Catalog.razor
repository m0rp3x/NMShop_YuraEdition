﻿@using NMShop.Client.Components;
@using NMShop.Client.Data;
@using NMShop.Client.Layout
@using NMShop.Shared.Models;
@inject HttpClient Http

@inject TestDataProvider DataProvider

@page "/catalog/{productType?}"

<div class="d-flex flex-grow-1" style="width: 100%">
    <MudDrawerContainer Style="width: 100%; position:relative;">

        <MudDrawer Width="19vw" Height="100%" @bind-Open="@_isDrawerOpened" Elevation="0" Variant="@DrawerVariant.Persistent" Class="hovering pl-6" Style="background-color: white;">

            <div class="pt-3 pr-3 d-flex flex-column" style="overflow-y: scroll; overflow-x: hidden;">
                <MudButton Style="flex-shrink: 0;" Class="py-1 px-3"  @onclick="ResetFilters" Variant="Variant.Outlined" Color="Color.Dark">Сбросить фильтр</MudButton>

                <input placeholder="Найти"
                       style="font-size: 17px; width: 100%; height: 50px; color: #000000; font-weight: 400; padding: 10px 22px; -webkit-appearance: none; border: 1px solid #BDBDBD; margin: 0; resize: none; border-radius: 25px;"
                       class="mt-3"
                       type="text"
                       @bind="SearchInput"
                       size="50" />

                <MudCheckBox T="bool" @bind-Value="OnlyInStock" @oninput="HandleStockChange" Label="Только в наличии" />

                <MudExpansionPanels Style="text-wrap: nowrap;" Class="mt-3" MultiExpansion="true">

                    <MudExpansionPanel Text="Цена, ₽">

                        <div class="d-flex" style="gap: 15px;">
                            <MudNumericField @onfocusout="OnPriceChanged" @bind-Value="MinPriceInput" Label="От" Step="1000" Variant="Variant.Outlined" />
                            <MudNumericField @onfocusout="OnPriceChanged" @bind-Value="MaxPriceInput" Label="До" Step="1000" Variant="Variant.Outlined" />
                        </div>

                    </MudExpansionPanel>

                    <MudExpansionPanel Text="Бренды">

                        @foreach (var brand in Brands)
                        {
                            <MudCheckBox T="bool" @bind-Value="brand.IsSelected" @oninput="async () => await OnBrandSelectioninputd(brand)" Label="@brand.Name" />
                        }

                    </MudExpansionPanel>

                    @if (productType == "shoes" || productType == "clothes")
                    {
                        <MudExpansionPanel Text="Размер">

                            @if (productType == "clothes")
                            {

                                @foreach (var cso in ClothesSizeOptions)
                                {
                                    <MudCheckBox @bind-Value="cso.IsSelected" Label="@cso.Size.ToString()" />
                                }

                            }
                            else
                            {
                                <div class="d-flex" style="gap: 15px;">

                                    <MudNumericField @bind-Value="MinPriceInput" Label="От" Step="1" Variant="Variant.Outlined" />
                                    <MudNumericField @bind-Value="MaxPriceInput" Label="До" Step="1" Variant="Variant.Outlined" />

                                </div>
                            }

                        </MudExpansionPanel>

                        <MudExpansionPanel Text="Пол">

                            @foreach (var gender in Genders)
                            {
                                <MudCheckBox @oninput="async () => await OnGenderSelectioninputd(gender)" @bind-Value="gender.IsSelected" Label="@gender.Name" />
                            }

                        </MudExpansionPanel>
                    }

                    <MudExpansionPanel Text="Рейтинг продаж">

                        @foreach (var selCategory in SelCategory)
                        {
                            <MudCheckBox T="bool" @bind-Value="selCategory.IsSelected" @oninput=" async () => await OnSelCategorySelectionInput(selCategory)" Label="@selCategory.Name" />
                        }

                    </MudExpansionPanel>

                    <MudExpansionPanel Text="Товарная категория">

                        @foreach (var subCategories in SubCategory)
                        {
                            <MudCheckBox T="bool" @bind-Value="subCategories.IsSelected" @oninput=" async () => await OnSubCategorySelectionInput(subCategories)" Label="@subCategories.Name" />
                        }

                    </MudExpansionPanel>

                </MudExpansionPanels>
            </div>

        </MudDrawer>

        <div class="d-flex justify-start align-center mud-height-full flex-column pa-10">

            <div class="d-flex mb-20" style="width: 100%; gap: 30px;">

                <MudText Style="color: #BDBDBD;" Typo="Typo.h4">Найдено: @(Products.Count())</MudText>
                
                <MudSpacer/>

                <MudText Class="d-flex align-center px-4 py-2" Typo="Typo.h5"
                    @onmouseover="() => {_isFilterButtonHovered = true;}"
                     @onmouseout="() => {_isFilterButtonHovered = false;}"
                         @onclick="() => {_isDrawerOpened = !_isDrawerOpened;}"
                     style=@FilterButtonStyle>
                    @((_isDrawerOpened ? "скрыть" : "показать") + " фильтр")
                </MudText>

                <div @onclick="() => {_isSortOptionOpened = !_isSortOptionOpened;}" style="transition: all 0.6s ease 0s; -webkit-transition: all 0.6s ease 0s; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.07); border-radius: 20px;" class="px-3 py-1 d-flex relative cursor-pointer align-center">
                    <MudText Class="mr-2" Typo="Typo.h6" Inline="true">СОРТИРОВАТЬ ПО:</MudText>
                    <MudText Class="mr-2" Style="color: #BDBDBD;" Typo="Typo.h6" Inline="true">@CurrentSortOption.Name</MudText>
                    <MudIcon Style=@("transition: all 0.6s ease 0s; " + (_isSortOptionOpened ? "transform: rotateX(180deg);" : null)) Icon="@Icons.Material.Filled.KeyboardArrowDown" Size="Size.Large" />
                    
                    <div class="absolute d-flex flex-column" style=@("transition: all 0.6s ease 0s; -webkit-transition: all 0.6s ease 0s; overflow: hidden; border-radius: 20px; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.07); left: 0; right: 0; z-index: " + (int)ZEnum.SortOptionsDropDown + "; " + (_isSortOptionOpened ? "top: 120%; height: fit-content;" : "height: 0px;"))>
                        @foreach (SortOption so in SortOptions)
                        {
                        <MudText @onclick="async () => await OnSortOptionChanged(so)"
                                 @onmouseover="() => {so.IsHovered = true;}"
                                 @onmouseout="() => {so.IsHovered = false;}"
                                 Style=@("transition: all 0.6s ease 0s;" + (so.IsHovered ? "color: white; background-color: black;" : "color: black; background-color: white;"))
                                 Class="pa-3 cursor-pointer" Typo="Typo.body1">@so.Name</MudText>
                        }
                    </div>

                </div>


                <div class="d-flex align-center" style="cursor: pointer;" @onclick="async () => await ToggleSortDirection()">
                    @if (isSortDescending)
                    {
                        <svg width="24px" height="24px" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="bi bi-sort-down">
                            <path d="M3.5 2.5a.5.5 0 0 0-1 0v8.793l-1.146-1.147a.5.5 0 0 0-.708.708l2 1.999.007.007a.497.497 0 0 0 .7-.006l2-2a.5.5 0 0 0-.707-.708L3.5 11.293V2.5zm3.5 1a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5zM7.5 6a.5.5 0 0 0 0 1h5a.5.5 0 0 0 0-1h-5zm0 3a.5.5 0 0 0 0 1h3a.5.5 0 0 0 0-1h-3zm0 3a.5.5 0 0 0 0 1h1a.5.5 0 0 0 0-1h-1z"></path>
                        </svg>
                    }
                    else
                    {
                        <svg width="24px" height="24px" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="bi bi-sort-down-alt">
                            <path d="M3.5 3.5a.5.5 0 0 0-1 0v8.793l-1.146-1.147a.5.5 0 0 0-.708.708l2 1.999.007.007a.497.497 0 0 0 .7-.006l2-2a.5.5 0 0 0-.707-.708L3.5 12.293V3.5zm4 .5a.5.5 0 0 1 0-1h1a.5.5 0 0 1 0 1h-1zm0 3a.5.5 0 0 1 0-1h3a.5.5 0 0 1 0 1h-3zm0 3a.5.5 0 0 1 0-1h5a.5.5 0 0 1 0 1h-5zM7 12.5a.5.5 0 0 0 .5.5h7a.5.5 0 0 0 0-1h-7a.5.5 0 0 0-.5.5z"></path>
                        </svg>
                    }
                </div>
            </div>

            <ProductGrid Products="Products" Take="20" />
        </div>

    </MudDrawerContainer>
</div>

@code {
    [Parameter]
    public string productType { get; set; }

    private IEnumerable<Product> Products = new List<Product>();

    protected override async Task OnInitializedAsync()
    {
        switch (productType)
        {
            case "shoes":
                Products = await DataProvider.GetShoes();
                break;
            case "clothes":
                Products = await DataProvider.GetClothes();
                break;
            case "accessories":
                Products = await DataProvider.GetAccessories();
                break;
            default:
                Products = await DataProvider.GetAll();
                break;
        }
    }
    
    
    
    private bool OnlyInStockSelected = false;

    private bool _isDrawerOpened = false;

    private bool _isFilterButtonHovered = false;

    private bool _isSortOptionOpened = false;

    private SortOption CurrentSortOption = SortOptions[0];

    private bool isSortDescending = true;

    private string FilterButtonStyle => 
    "transition: all 0.6s ease 0s; -webkit-transition: all 0.6s ease 0s; border-radius: 20px; cursor: pointer; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.07); text-transform: uppercase; font-size: 14px; border: none; line-height: 1; "
    + (_isFilterButtonHovered ? "color: black; background-color: white;" : "color: white; background-color: black;");

    private int? MinPriceInput { get; set; }
    private int? MaxPriceInput { get; set; }


    private int MinSizeInput;

    private int MaxSizeInput;

    private bool OnlyInStock = false;


    private string SearchInput { get; set; } = String.Empty;

    private List<BrandModel> Brands;
    private List<GenderModel> Genders;
    private List<SubCategoryModel> SubCategory;
    private List<SelCategoryModel> SelCategory;
    

    private static List<ClothesSizeOption> ClothesSizeOptions = Enum.GetValues(typeof(ClothingSize)).Cast<ClothingSize>().Select(cs => new ClothesSizeOption() { Size = cs }).ToList();

    
   

    private static List<SortOption> SortOptions = new List<SortOption>
    {
        new SortOption { Name = "НОВИЗНЕ", Type = "newest" },
        new SortOption { Name = "ЦЕНЕ", Type = "price" }
    };

    protected override void OnInitialized()
    {
        // Инициализируем список брендов
        Brands = TestDataProvider.GetTestBrands()
            .Select(name => new BrandModel { Name = name})
            .ToList();

        Genders = TestDataProvider.GetTestGenders()
            .Select(name => new GenderModel { Name = name})
            .ToList();
        
        SubCategory = TestDataProvider.GetTestSubCategory()
            .Select(name => new SubCategoryModel { Name = name })
            .ToList();

        SelCategory = TestDataProvider.GetTestSelCategory()
            .Select(name => new SelCategoryModel { Name = name })
            .ToList();



    }

    private async Task LoadProducts()
    {
        var queryParams = new Dictionary<string, string>();

        // Gather selected filter inputs
        var selectedBrands = GetSelectedBrands();
        if (selectedBrands.Any())
        {
            queryParams["Brand"] = string.Join(",", selectedBrands);
        }

        var selectedGenders = GetSelectedGenders();
        if (selectedGenders.Any())
        {
            queryParams["Gender"] = string.Join(",", selectedGenders);
        }

        var selectedSubCategory = GetSelectedSubCategory();
        if (selectedSubCategory.Any())
        {
            queryParams["SubCategory"] = string.Join(",", selectedSubCategory);
        } 
        var selectedSelCategory = GetSelectedSelCategory();

        if (selectedSelCategory.Any())
        {
            queryParams["SelCategory"] = string.Join(",", selectedSelCategory);
        }
        
        queryParams["SortBy"] = CurrentSortOption.Type;
        queryParams["SortDirection"] = isSortDescending ? "desc" : "asc";
        

        if (MinPriceInput.HasValue) queryParams["MinPrice"] = MinPriceInput.Value.ToString();
        if (MaxPriceInput.HasValue) queryParams["MaxPrice"] = MaxPriceInput.Value.ToString();


        if (OnlyInStock)
        {
            queryParams["InStock"] = "true";
        }

        // Construct query string and call API
        var queryString = string.Join("&", queryParams.Select(kv => $"{kv.Key}={kv.Value}"));
        var url = $"https://localhost:7279/api/products/filter?{queryString}";

        Products = await Http.GetFromJsonAsync<IEnumerable<Product>>(url);
        Console.WriteLine($"Запрос на сервер: {url}");

    }


    private async Task OnBrandSelectioninputd(BrandModel brand)
    {
        brand.IsSelected = !brand.IsSelected; // Toggle the selection
        await LoadProducts(); // Load products immediately
    }
    
    private async Task OnSortOptionChanged(SortOption selectedSortOption)
    {
        CurrentSortOption = selectedSortOption;
        await LoadProducts(); // Перезагрузить список продуктов с новой сортировкой
    }

    private async Task OnSubCategorySelectionInput(SubCategoryModel subCategory)
    {
        subCategory.IsSelected = !subCategory.IsSelected;
        await LoadProducts();
    }
    private async Task OnSelCategorySelectionInput(SelCategoryModel selCategory)
    {
        selCategory.IsSelected = !selCategory.IsSelected;
        await LoadProducts();
    }
    
    private async Task ToggleSortDirection()
    {
        isSortDescending = !isSortDescending;
        await LoadProducts();
    }
    
    private async Task OnPriceChanged()
    {
        await LoadProducts(); // Применение фильтрации после завершения ввода
        StateHasChanged();
    }

    
    
    private async Task HandleStockChange(ChangeEventArgs e)
    {
        OnlyInStock = (bool)e.Value;  // Получаем значение из чекбокса
        await LoadProducts();  // Обновляем список продуктов
        StateHasChanged(); // Ensure the UI reflects changes instantly
    }

    private async Task OnGenderSelectioninputd(GenderModel gender)
    {
        gender.IsSelected = !gender.IsSelected; // Toggle the selection
        await LoadProducts(); // Load products immediately
        StateHasChanged(); // Ensure the UI reflects changes instantly
    }

    private async Task OnSellingCategoriesChanged(CategoryOption co)
    {
        co.IsSelected = !co.IsSelected; // Toggle the selection
        await LoadProducts(); // Load products immediately
        StateHasChanged(); // Ensure the UI reflects changes instantly
    }
    
    private async Task ResetFilters()
    {
        // Сброс фильтров
        foreach (var brand in Brands)
        {
            brand.IsSelected = false;
        }

        foreach (var gender in Genders)
        {
            gender.IsSelected = false;
        }

        foreach (var subCategory in SubCategory)
        {
            subCategory.IsSelected = false;
        }

        // Сброс значений полей
        MinPriceInput = null;
        MaxPriceInput = null;
        OnlyInStock = false;

        // Обновляем продукты после сброса
        await LoadProducts();
    }


  

    // Метод для получения выбранных брендов
    private IEnumerable<string> GetSelectedBrands()
    {
        return Brands.Where(b => b.IsSelected).Select(b => b.Name);
    }

    // Метод для получения выбранных вариантов пола
    private IEnumerable<string> GetSelectedGenders()
    {
        return Genders.Where(g => g.IsSelected).Select(g => g.Name);
    }

    private IEnumerable<string> GetSelectedSubCategory()
    {
        return SubCategory.Where(s => s.IsSelected).Select(s => s.Name);
    }
    private IEnumerable<string> GetSelectedSelCategory()
    {
        return SelCategory.Where(s => s.IsSelected).Select(s => s.Name);
    }


    
    // Модели
    
    private class BrandModel
    {
        public string Name = "Unitialized";
        public bool IsSelected = false;
    }
    
    private class SubCategoryModel
    {
        public string Name = "Unitialized";
        public bool IsSelected = false;
    }
    private class SelCategoryModel
    {
        public string Name = "Unitialized";
        public bool IsSelected = false;
    }

    public class GenderModel
    {
        public string Name = "Unitialized";
        public bool IsSelected = false;
    }

    public class CategoryOption
    {
        public string Name { get; set; }
        public bool IsSelected { get; set; }
    }

    public class ProductCategory
    {
        public string Name { get; set; }
        public bool IsSelected { get; set; }
    }

    public class ClothesSizeOption
    {
        public ClothingSize Size { get; set; }
        public bool IsSelected { get; set; }
    }

    public class SortOption
    {
        public string Name { get; set; }
        public string Type { get; set; }
        public bool IsHovered { get; set; } = false;
    }

}