@using NMShop.Client.Components;
@using NMShop.Client.Data;
@using NMShop.Client.Layout;
@using NMShop.Shared.Models;
@inject HttpClient Http;
@inject NavigationManager Navigation;
@inject ClientDataProvider DataProvider;

@page "/catalog/{filter?}"

<div class="d-flex flex-grow-1" style="width: 100%">
    <MudDrawerContainer Style="width: 100%; position:relative;">

        <MudDrawer Width="19vw" Height="100%" @bind-Open="@_isDrawerOpened" Elevation="0" Variant="@DrawerVariant.Persistent" Class="hovering pl-9 pt-4 pb-2" Style="background-color: white;">

            <div class="d-flex flex-column" style="overflow-y: scroll; overflow-x: hidden;">
                <MudButton Style="flex-shrink: 0;" Class="py-1 px-3" @onclick="ResetFilters" Variant="Variant.Outlined" Color="Color.Dark">Сбросить фильтр</MudButton>

                <input placeholder="Найти"
                       style="font-size: 17px; width: 100%; height: 50px; color: #000000; font-weight: 400; padding: 10px 22px; -webkit-appearance: none; border: 1px solid #BDBDBD; margin: 0; resize: none; border-radius: 25px;"
                       class="mt-3"
                       type="text"
                       @bind="Filter.SearchQuery"
                       size="50" />

                <MudCheckBox T="bool" @bind-Value="Filter.InStock" Label="Только в наличии" />

                <MudExpansionPanels Style="text-wrap: nowrap;" Class="mt-3" MultiExpansion="true">

                    <MudExpansionPanel Text="Цена, ₽">

                        <div class="d-flex" style="gap: 15px;">

                            <div class="d-flex" style="gap: 15px;">
                                <MudNumericField @bind-Value="Filter.MinPrice" Label="От" Step="1000" Variant="Variant.Outlined" />
                                <MudNumericField @bind-Value="Filter.MaxPrice" Label="До" Step="1000" Variant="Variant.Outlined" />
                            </div>

                        </div>

                    </MudExpansionPanel>

                    <MudExpansionPanel Text="Бренды">

                        @foreach (var brand in Brands)
                        {
                             <MudCheckBox T="bool" @bind-Value="brand.IsSelected" Label="@brand.Name" />
                        }
                    </MudExpansionPanel>


                    @if (CategorySizeDisplayType != "none")
                    {
                        <MudExpansionPanel Text="Размер">

                            @if (CategorySizeDisplayType == "string")
                            {
                                 <MudSelect T="int?" @bind-Value="MinClothingSize" Variant="Variant.Outlined" Placeholder="Выбрать" Label="От">
                                     @foreach (var sizeOption in Enum.GetValues(typeof(ClothingSize)).Cast<ClothingSize>().Select(e => (int?)e).Where(e => !MaxClothingSize.HasValue || e <= MaxClothingSize).ToList())
                                         {
                                             <MudSelectItem Value="@sizeOption">@(((ClothingSize)sizeOption).ToString())</MudSelectItem>
                                         }
                                 </MudSelect>
                                 
                                 <MudSelect T="int?" @bind-Value="MaxClothingSize" Variant="Variant.Outlined" Placeholder="Выбрать" Label="До">
                                     @foreach (var sizeOption in Enum.GetValues(typeof(ClothingSize)).Cast<ClothingSize>().Select(e => (int?)e).Where(e => !MinClothingSize.HasValue || e >= MinClothingSize).ToList())
                                         {
                                             <MudSelectItem Value="@sizeOption">@(((ClothingSize)sizeOption).ToString())</MudSelectItem>
                                         }
                                 </MudSelect>
                            }
                            else if (CategorySizeDisplayType == "decimal")
                            {
                                <div class="d-flex" style="gap: 15px;">
                                    <MudNumericField @onfocusout="OnShoeSizeChanged" @bind-Value="MinShoeSize" Label="От" Step="1" Variant="Variant.Outlined" />
                                    <MudNumericField @onfocusout="OnShoeSizeChanged" @bind-Value="MaxShoeSize" Label="До" Step="1" Variant="Variant.Outlined" />
                                </div>
                            }

                        </MudExpansionPanel>
                    }

                    <MudExpansionPanel Text="Пол">

                        @foreach (var gender in Genders)
                        {
                            <MudCheckBox T="bool" @bind-Value="gender.IsSelected" Label="@gender.Name" />

                        }

                    </MudExpansionPanel>

                    <MudExpansionPanel Text="Рейтинг продаж">

                        @foreach (var selCategory in SelCategory)
                        {
                            <MudCheckBox T="bool" @bind-Value="selCategory.IsSelected" Label="@selCategory.Name" />

                        }

                    </MudExpansionPanel>

                    <MudExpansionPanel Text="Товарная категория">

                        @foreach (var subCategories in SubCategory)
                        {
                            <MudCheckBox T="bool" @bind-Value="subCategories.IsSelected" Label="@subCategories.Name" />
                        }

                    </MudExpansionPanel>

                </MudExpansionPanels>
            </div>

        </MudDrawer>

        <div class="d-flex justify-start align-center mud-height-full flex-column pa-10">

            <div class="d-flex mb-20" style="width: 100%; gap: 30px;">

                <MudText Style="color: #BDBDBD;" Typo="Typo.h4">Найдено: @(_productCount)</MudText>

                <MudSpacer />

                <MudText Class="d-flex align-center px-4 py-2" Typo="Typo.h5"
                         @onmouseover="() => {_isFilterButtonHovered = true;}"
                         @onmouseout="() => {_isFilterButtonHovered = false;}"
                         @onclick="() => {_isDrawerOpened = !_isDrawerOpened;}"
                         style=@FilterButtonStyle>
                    @((_isDrawerOpened ? "скрыть" : "показать") + " фильтр")
                </MudText>

                <div @onclick="() => {_isSortOptionOpened = !_isSortOptionOpened;}" class="px-3 py-1 d-flex relative cursor-pointer align-center" style="box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.07);border-radius: 20px;">
                    <MudText Class="mr-2" Typo="Typo.h6" Inline="true">СОРТИРОВАТЬ ПО:</MudText>
                    <MudText Class="mr-2" Style="color: #BDBDBD;" Typo="Typo.h6" Inline="true">@CurrentSortOption.Name</MudText>
                    <MudIcon Style=@("transition: all 0.6s ease 0s; " + (_isSortOptionOpened ? "transform: rotateX(180deg);" : null)) Icon="@Icons.Material.Filled.KeyboardArrowDown" Size="Size.Small" />
                    <div class="absolute" style=@($"border-radius: 20px; width: 100%; transition: all 1s ease 0s; overflow: hidden; z-index: {(int)ZEnum.SortOptionsDropDown};" + (_isSortOptionOpened ? "left: 0; top: 120%; height: fit-content;" : "height: 0px;"))>
                        @foreach (SortOption so in SortOptions)
                        {
                            <MudText @onclick="() => OnSortOptionChanged(so)"
                                     @onmouseover="() => {so.IsHovered = true;}"
                                     @onmouseout="() => {so.IsHovered = false;}"
                                     Style=@("transition: all 0.6s ease 0s;" + (so.IsHovered ? "color: white; background-color: black;" : "color: black; background-color: white;"))
                                     Class="pa-3 cursor-pointer" Typo="Typo.body1">@so.Name</MudText>
                        }
                    </div>
                </div>

                <div class="d-flex align-center" style="cursor: pointer;" @onclick="ToggleSortDirection">
                    @if (Filter.IsAscending)
                    {
                        <svg width="24px" height="24px" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="bi bi-sort-down">
                            <path d="M3.5 2.5a.5.5 0 0 0-1 0v8.793l-1.146-1.147a.5.5 0 0 0-.708.708l2 1.999.007.007a.497.497 0 0 0 .7-.006l2-2a.5.5 0 0 0-.707-.708L3.5 11.293V2.5zm3.5 1a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5zM7.5 6a.5.5 0 0 0 0 1h5a.5.5 0 0 0 0-1h-5zm0 3a.5.5 0 0 0 0 1h3a.5.5 0 0 0 0-1h-3zm0 3a.5.5 0 0 0 0 1h1a.5.5 0 0 0 0-1h-1z"></path>
                        </svg>
                    }
                    else
                    {
                        <svg width="24px" height="24px" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="bi bi-sort-down-alt">
                            <path d="M3.5 3.5a.5.5 0 0 0-1 0v8.793l-1.146-1.147a.5.5 0 0 0-.708.708l2 1.999.007.007a.497.497 0 0 0 .7-.006l2-2a.5.5 0 0 0-.707-.708L3.5 12.293V3.5zm4 .5a.5.5 0 0 1 0-1h1a.5.5 0 0 1 0 1h-1zm0 3a.5.5 0 0 1 0-1h3a.5.5 0 0 1 0 1h-3zm0 3a.5.5 0 0 1 0-1h5a.5.5 0 0 1 0 1h-5zM7 12.5a.5.5 0 0 0 .5.5h7a.5.5 0 0 0 0-1h-7a.5.5 0 0 0-.5.5z"></path>
                        </svg>
                    }
                </div>
            </div>

            <ProductGrid Filter="Filter" OnProductCountChanged="OnProductCountChanged" />
        </div>

    </MudDrawerContainer>
</div>

@code {
    [Parameter]
    public string filter { get; set; }

    private bool _isDrawerOpened = false;
    private bool _isFilterButtonHovered = false;
    private bool _isSortOptionOpened = false;

    private SortOption CurrentSortOption = SortOptions[0];

    private string FilterButtonStyle =>
    "transition: all 0.6s ease 0s; -webkit-transition: all 0.6s ease 0s; border-radius: 20px; cursor: pointer; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.07); text-transform: uppercase; font-size: 14px; border: none; line-height: 1; "
    + (_isFilterButtonHovered ? "color: black; background-color: white;" : "color: white; background-color: black;");

    private List<BrandModel> Brands = new();
    private List<GenderModel> Genders = new();
    private List<SubCategoryModel> SubCategory = new();
    private List<SelCategoryModel> SelCategory = new();

    private string CategorySizeDisplayType = "none";

    private int? _minClothingSize;
    private int? MinClothingSize
    {
        get => _minClothingSize;
        set
        {
            _minClothingSize = value;
            if (MaxClothingSize.HasValue && _minClothingSize.HasValue && _minClothingSize > MaxClothingSize)
            {
                MaxClothingSize = _minClothingSize;
            }
        }
    }

    private int? _maxClothingSize;
    private int? MaxClothingSize
    {
        get => _maxClothingSize;
        set
        {
            _maxClothingSize = value;
            if (MinClothingSize.HasValue && _maxClothingSize.HasValue && _maxClothingSize < MinClothingSize)
            {
                MinClothingSize = _maxClothingSize;
            }
        }
    }


    private decimal? MinShoeSize { get; set; }
    private decimal? MaxShoeSize { get; set; }

    private static List<SortOption> SortOptions = new List<SortOption>
    {
        new SortOption { Name = "ПОПУЛЯРНОСТИ", Type = "popularity" },
        new SortOption { Name = "НОВИЗНЕ", Type = "newest" },
        new SortOption { Name = "ЦЕНЕ", Type = "price" }
    };

    private ProductFilter Filter { get; set; } = new ProductFilter();

    private int _productCount = 0;

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(filter))
        {
            Filter = ParseFilter(filter);
        }
        
        Brands = (await DataProvider.GetBrandsAsync())
            .Select(b =>
            {
                var brandModel = new BrandModel { Name = b };
                brandModel.OnValueChanged = () => OnFilterChanged(brandModel);
                return brandModel;
            }).ToList();

        Genders = (await DataProvider.GetGendersAsync()).Select(g =>
        {
            var genderModel = new GenderModel { Name = g };
            genderModel.OnValueChanged = () => OnFilterChanged(genderModel);
            return genderModel;
        }).ToList();
        
        SubCategory = (await DataProvider.GetSubCategoriesAsync(string.IsNullOrEmpty(Filter.Category) ? null : Filter.Category))
            .Select(sc =>
            {
                var subCategoryModel = new SubCategoryModel { Name = sc };
                subCategoryModel.OnValueChanged = () => OnFilterChanged(subCategoryModel);
                return subCategoryModel;
            })
            .ToList();
    
        
        SelCategory = (await DataProvider.GetSelCategoriesAsync())
            .Select(sc =>
            {
                var selCategoryModel = new SelCategoryModel { Name = sc };
                selCategoryModel.OnValueChanged = () => OnFilterChanged(selCategoryModel);
                return selCategoryModel;
            })
            .ToList();

        if (!string.IsNullOrEmpty(Filter.Category)) CategorySizeDisplayType = await DataProvider.GetCategorySizeDisplayTypeAsync(Filter.Category);
        // Инициализация выбранных значений из фильтра
        await InitializeSelectedFilterOptions();
    }

    private async Task InitializeSelectedFilterOptions()
    {
        foreach (var brand in Brands)
        {
            if (Filter.Brands.Contains(brand.Name))
                brand.IsSelected = true;
        }

        foreach (var gender in Genders)
        {
            if (Filter.Gender == gender.Name)
                gender.IsSelected = true;
        }

        foreach (var subCategory in SubCategory)
        {
            if (Filter.SubCategories.Contains(subCategory.Name))
                subCategory.IsSelected = true;
        }

        foreach (var selCategory in SelCategory)
        {
            if (Filter.SelCategory == selCategory.Name)
                selCategory.IsSelected = true;
        }
    }

    private async Task OnFilterChanged(IFilterOption filterOption)
    {
        var newFilter = Filter.Clone();

        if (filterOption is BrandModel brand)
        {
            if (brand.IsSelected)
            {
                newFilter.Brands.Add(brand.Name);
            }
            else
            {
                newFilter.Brands.Remove(brand.Name);
            }
        }
        else if (filterOption is GenderModel gender)
        {
            if (gender.IsSelected)
            {
                newFilter.Gender = gender.Name;
            }
            else
            {
                if (newFilter.Gender == gender.Name)
                    newFilter.Gender = null;
            }
        }
        else if (filterOption is SubCategoryModel subCategory)
        {
            if (subCategory.IsSelected)
            {
                newFilter.SubCategories.Add(subCategory.Name);
            }
            else
            {
                newFilter.SubCategories.Remove(subCategory.Name);
            }
        }
        else if (filterOption is SelCategoryModel selCategory)
        {
            if (selCategory.IsSelected)
            {
                newFilter.SelCategory = selCategory.Name;
            }
            else
            {
                if (newFilter.SelCategory == selCategory.Name)
                    newFilter.SelCategory = null;
            }
        }
        else if (filterOption is ClothingSizeOption sizeOption)
        {
            if (sizeOption.IsSelected)
            {
                newFilter.Sizes.Add((int)sizeOption.Size);
            }
            else
            {
                newFilter.Sizes.Remove((int)sizeOption.Size);
            }
        }
        Filter = newFilter;
        StateHasChanged();
    }

    private void OnShoeSizeChanged()
    {
        // var newFilter = Filter.Clone();

        // if (MinShoeSize.HasValue && MaxShoeSize.HasValue && MinShoeSize <= MaxShoeSize)
        // {
        //     // Генерируем список размеров для обуви
        //     var sizes = Enumerable.Range(MinShoeSize.Value, MaxShoeSize.Value - MinShoeSize.Value + 1).ToList();

        //     // Удаляем предыдущие размеры обуви из фильтра
        //     newFilter.Sizes.RemoveAll(size => size >= MinShoeSize.Value && size <= MaxShoeSize.Value);

        //     // Добавляем новые размеры
        //     newFilter.Sizes.AddRange(sizes);
        // }

        // Filter = newFilter;
    }

    private void OnSortOptionChanged(SortOption selectedSortOption)
    {
        CurrentSortOption = selectedSortOption;

        var newFilter = Filter.Clone();
        newFilter.SortBy = selectedSortOption.Type;

        Filter = newFilter;
    }

    private void ToggleSortDirection()
    {
        var newFilter = Filter.Clone();
        newFilter.IsAscending = !newFilter.IsAscending;

        Filter = newFilter;
        StateHasChanged();
    }

    private void ResetFilters()
    {
        Filter = new ProductFilter();

        foreach (var brand in Brands)
        {
            brand.IsSelected = false;
        }

        foreach (var gender in Genders)
        {
            gender.IsSelected = false;
        }

        foreach (var subCategory in SubCategory)
        {
            subCategory.IsSelected = false;
        }

        foreach (var selCategory in SelCategory)
        {
            selCategory.IsSelected = false;
        }
    }

    private void OnProductCountChanged(int count)
    {
        _productCount = count;
    }

    private ProductFilter ParseFilter(string filterString)
    {
        var filter = new ProductFilter();
        var parameters = filterString.Split('&');
        foreach (var parameter in parameters)
        {
            var keyValue = parameter.Split('=');
            if (keyValue.Length == 2)
            {
                var key = keyValue[0];
                var value = keyValue[1];

                switch (key)
                {
                    case "Brands":
                        filter.Brands = value.Split(',').ToList();
                        break;
                    case "MinPrice":
                        filter.MinPrice = decimal.Parse(value);
                        break;
                    case "MaxPrice":
                        filter.MaxPrice = decimal.Parse(value);
                        break;
                    case "Gender":
                        filter.Gender = value;
                        break;
                    case "Category":
                        filter.Category = value;
                        break;
                    case "InStock":
                        filter.InStock = bool.Parse(value);
                        break;
                    case "Color":
                        filter.Color = value;
                        break;
                    case "SubCategories":
                        filter.SubCategories = value.Split(',').ToList();
                        break;
                    case "SelCategory":
                        filter.SelCategory = value;
                        break;
                    case "SortBy":
                        filter.SortBy = value;
                        break;
                    case "IsAscending":
                        filter.IsAscending = bool.Parse(value);
                        break;
                    case "Skip":
                        filter.Skip = int.Parse(value);
                        break;
                    case "Take":
                        filter.Take = int.Parse(value);
                        break;
                    case "SearchQuery":
                        filter.SearchQuery = value;
                        break;
                    case "Sizes":
                        filter.Sizes = value.Split(',').Select(s => decimal.Parse(s)).ToList();
                        break;
                }
            }
        }
        return filter;
    }

    
    
    
    public abstract class FilterOptionBase : IFilterOption
    {
        public virtual string Name { get; set; } // Виртуальный, чтобы его можно было переопределить в дочерних классах

        private bool _isSelected;
        public bool IsSelected
        {
            get => _isSelected;
            set
            {
                if (_isSelected != value)
                {
                    _isSelected = value;
                    Console.WriteLine($"IsSelected changed to: {_isSelected} for {Name}");
                    OnValueChanged?.Invoke(); // Вызов обработчика при изменении
                    OnPropertyChanged(); // Уведомление об изменении свойства
                }
            }
        }

        public Action OnValueChanged { get; set; }

        public event Action PropertyChanged;

        protected virtual void OnPropertyChanged()
        {
            PropertyChanged?.Invoke();
        }
    }


    
    
    
    // Модели
    public interface IFilterOption
    {
        string Name { get; }
        bool IsSelected { get; set; }
    }

    
   


    private class BrandModel : FilterOptionBase
    {
       

    }

    private class SubCategoryModel : FilterOptionBase
    {
     

    }

    private class SelCategoryModel : FilterOptionBase
    {
      

    }

    public class GenderModel : FilterOptionBase
    {
     
    }

    public class SizeOption : FilterOptionBase
    {
        public int Size { get; set; }
        public string Name => Size.ToString();
    }

    public class ClothingSizeOption : FilterOptionBase
    {
        public ClothingSize Size { get; set; }
        public string Name => Size.ToString();
    }

    public class SortOption
    {
        public string Name { get; set; }
        public string Type { get; set; }
        public bool IsHovered { get; set; } = false;
    }
}
