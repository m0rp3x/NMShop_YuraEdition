@using NMShop.Client.Components;
@using NMShop.Client.Data;
@using NMShop.Client.Layout;
@using NMShop.Shared.Models;
@inject HttpClient Http;
@inject NavigationManager Navigation;
@inject ClientDataProvider DataProvider;

@page "/catalog/{filter?}"

<div class="d-flex flex-grow-1" style="width: 100%">
    <MudDrawerContainer Style="width: 100%; position:relative;">

        <MudDrawer Width="19vw" Height="100%" @bind-Open="@_isDrawerOpened" Elevation="0" Variant="@DrawerVariant.Persistent" Class="hovering pl-9 pt-4 pb-2" Style="background-color: white;">

            <div class="d-flex flex-column" style="overflow-y: scroll; overflow-x: hidden;">
                <MudButton Style="flex-shrink: 0;" Class="py-1 px-3" @onclick="ResetFilters" Variant="Variant.Outlined" Color="Color.Dark">Сбросить фильтр</MudButton>

                <input placeholder="Найти"
                       style="font-size: 17px; width: 100%; height: 50px; color: #000000; font-weight: 400; padding: 10px 22px; -webkit-appearance: none; border: 1px solid #BDBDBD; margin: 0; resize: none; border-radius: 25px;"
                       class="mt-3"
                       type="text"
                       @bind="SearchInput"
                       size="50" />

                <MudCheckBox T="bool" @bind-Value="OnlyInStock" @oninput="async () => await OnFilterChanged(OnlyInStockFilter)" Label="Только в наличии" />

                <MudExpansionPanels Style="text-wrap: nowrap;" Class="mt-3" MultiExpansion="true">

                    <MudExpansionPanel Text="Цена, ₽">

                        <div class="d-flex" style="gap: 15px;">

                            <div class="d-flex" style="gap: 15px;">
                                <MudNumericField @onfocusout="OnPriceChanged" @bind-Value="MinPriceInput" Label="От" Step="1000" Variant="Variant.Outlined" />
                                <MudNumericField @onfocusout="OnPriceChanged" @bind-Value="MaxPriceInput" Label="До" Step="1000" Variant="Variant.Outlined" />
                            </div>

                        </div>

                    </MudExpansionPanel>

                    <MudExpansionPanel Text="Бренды">

                        @foreach (var brand in Brands)
                        {
                            <MudCheckBox T="bool" @bind-Value="brand.IsSelected" @oninput="async () => await OnFilterChanged(brand)" Label="@brand.Name" />
                        }

                    </MudExpansionPanel>

                    @if (Filter.Category == "Обувь" || Filter.Category == "Одежда")
                    {
                        <MudExpansionPanel Text="Размер">

                            @if (Filter.Category == "Одежда")
                            {
                                @foreach (var cso in ClothesSizeOptions)
                                {
                                    <MudCheckBox @bind-Value="cso.IsSelected" @oninput="async () => await OnFilterChanged(cso)" Label="@cso.Size.ToString()" />
                                }
                            }
                            else
                            {
                                <div class="d-flex" style="gap: 15px;">
                                    <MudNumericField @onfocusout="OnSizeChanged" @bind-Value="MinSizeInput" Label="От" Step="1" Variant="Variant.Outlined" />
                                    <MudNumericField @onfocusout="OnSizeChanged" @bind-Value="MaxSizeInput" Label="До" Step="1" Variant="Variant.Outlined" />
                                </div>
                            }

                        </MudExpansionPanel>

                        <MudExpansionPanel Text="Пол">

                            @foreach (var gender in Genders)
                            {
                                <MudCheckBox @bind-Value="gender.IsSelected" @oninput="async () => await OnFilterChanged(gender)" Label="@gender.Name" />
                            }

                        </MudExpansionPanel>
                    }

                    <MudExpansionPanel Text="Рейтинг продаж">

                        @foreach (var selCategory in SelCategory)
                        {
                            <MudCheckBox T="bool" @bind-Value="selCategory.IsSelected" @oninput="async () => await OnFilterChanged(selCategory)" Label="@selCategory.Name" />
                        }

                    </MudExpansionPanel>

                    <MudExpansionPanel Text="Товарная категория">

                        @foreach (var subCategories in SubCategory)
                        {
                            <MudCheckBox T="bool" @bind-Value="subCategories.IsSelected" @oninput="async () => await OnFilterChanged(subCategories)" Label="@subCategories.Name" />
                        }

                    </MudExpansionPanel>

                </MudExpansionPanels>
            </div>

        </MudDrawer>

        <div class="d-flex justify-start align-center mud-height-full flex-column pa-10">

            <div class="d-flex mb-20" style="width: 100%; gap: 30px;">

                <MudText Style="color: #BDBDBD;" Typo="Typo.h4">Найдено: @(Products.Count())</MudText>

                <MudSpacer />

                <MudText Class="d-flex align-center px-4 py-2" Typo="Typo.h5"
                         @onmouseover="() => {_isFilterButtonHovered = true;}"
                         @onmouseout="() => {_isFilterButtonHovered = false;}"
                         @onclick="() => {_isDrawerOpened = !_isDrawerOpened;}"
                         style=@FilterButtonStyle>
                    @((_isDrawerOpened ? "скрыть" : "показать") + " фильтр")
                </MudText>

                <div @onclick="() => {_isSortOptionOpened = !_isSortOptionOpened;}" class="px-3 py-1 d-flex relative cursor-pointer align-center" style="box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.07);border-radius: 20px;">
                    <MudText Class="mr-2" Typo="Typo.h6" Inline="true">СОРТИРОВАТЬ ПО:</MudText>
                    <MudText Class="mr-2" Style="color: #BDBDBD;" Typo="Typo.h6" Inline="true">@CurrentSortOption.Name</MudText>
                    <MudIcon Style=@("transition: all 0.6s ease 0s; " + (_isSortOptionOpened ? "transform: rotateX(180deg);" : null)) Icon="@Icons.Material.Filled.KeyboardArrowDown" Size="Size.Small" />
                    <div class="absolute" style=@("transition: all 0.6s ease 0s; overflow: hidden; " + (_isSortOptionOpened ? "top: 120%; height: fit-content;" : "height: 0px;"))>
                        @foreach (SortOption so in SortOptions)
                        {
                            <MudText @onclick="async () => await OnSortOptionChanged(so)"
                                     @onmouseover="() => {so.IsHovered = true;}"
                                     @onmouseout="() => {so.IsHovered = false;}"
                                     Style=@("transition: all 0.6s ease 0s;" + (so.IsHovered ? "color: white; background-color: black;" : "color: black; background-color: white;"))
                                     Class="pa-3 cursor-pointer" Typo="Typo.body1">@so.Name</MudText>
                        }
                    </div>
                </div>

                <div class="d-flex align-center" style="cursor: pointer;" @onclick="async () => await ToggleSortDirection()">
                    @if (isSortDescending)
                    {
                        <svg width="24px" height="24px" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="bi bi-sort-down">
                            <path d="M3.5 2.5a.5.5 0 0 0-1 0v8.793l-1.146-1.147a.5.5 0 0 0-.708.708l2 1.999.007.007a.497.497 0 0 0 .7-.006l2-2a.5.5 0 0 0-.707-.708L3.5 11.293V2.5zm3.5 1a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5zM7.5 6a.5.5 0 0 0 0 1h5a.5.5 0 0 0 0-1h-5zm0 3a.5.5 0 0 0 0 1h3a.5.5 0 0 0 0-1h-3zm0 3a.5.5 0 0 0 0 1h1a.5.5 0 0 0 0-1h-1z"></path>
                        </svg>
                    }
                    else
                    {
                        <svg width="24px" height="24px" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="bi bi-sort-down-alt">
                            <path d="M3.5 3.5a.5.5 0 0 0-1 0v8.793l-1.146-1.147a.5.5 0 0 0-.708.708l2 1.999.007.007a.497.497 0 0 0 .7-.006l2-2a.5.5 0 0 0-.707-.708L3.5 12.293V3.5zm4 .5a.5.5 0 0 1 0-1h1a.5.5 0 0 1 0 1h-1zm0 3a.5.5 0 0 1 0-1h3a.5.5 0 0 1 0 1h-3zm0 3a.5.5 0 0 1 0-1h5a.5.5 0 0 1 0 1h-5zM7 12.5a.5.5 0 0 0 .5.5h7a.5.5 0 0 0 0-1h-7a.5.5 0 0 0-.5.5z"></path>
                        </svg>
                    }
                </div>
            </div>

            <ProductGrid Filter="Filter" />
        </div>

    </MudDrawerContainer>
</div>

@code {
    [Parameter]
    public string filter { get; set; }

    private IEnumerable<ProductDto> Products = new List<ProductDto>();

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(filter))
        {
            Filter = ParseFilter(filter);
        }

        Brands = (await DataProvider.GetBrandsAsync()).Select(b => new BrandModel { Name = b }).ToList();
        Genders = (await DataProvider.GetGendersAsync()).Select(g => new GenderModel { Name = g }).ToList();
        SubCategory = (await DataProvider.GetSubCategoriesAsync(string.IsNullOrEmpty(Filter.Category) ? null : Filter.Category)).Select(sc => new SubCategoryModel { Name = sc }).ToList();
        SelCategory = (await DataProvider.GetSelCategoriesAsync()).Select(sc => new SelCategoryModel { Name = sc }).ToList();

        await LoadProducts();
    }

    private ProductFilter Filter { get; set; } = new ProductFilter();

    private bool OnlyInStockSelected = false;

    private bool _isDrawerOpened = false;

    private bool _isFilterButtonHovered = false;

    private bool _isSortOptionOpened = false;

    private SortOption CurrentSortOption = SortOptions[0];

    private bool isSortDescending = true;

    private string FilterButtonStyle =>
    "transition: all 0.6s ease 0s; -webkit-transition: all 0.6s ease 0s; border-radius: 20px; cursor: pointer; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.07); text-transform: uppercase; font-size: 14px; border: none; line-height: 1; "
    + (_isFilterButtonHovered ? "color: black; background-color: white;" : "color: white; background-color: black;");

    private int? MinPriceInput { get; set; }
    private int? MaxPriceInput { get; set; }

    private int MinSizeInput;

    private int MaxSizeInput;

    private bool OnlyInStock = false;

    private string SearchInput { get; set; } = String.Empty;

    private List<BrandModel> Brands = new();
    private List<GenderModel> Genders = new();
    private List<SubCategoryModel> SubCategory = new();
    private List<SelCategoryModel> SelCategory = new();

    private IFilterOption OnlyInStockFilter = new BoolFilter("InStock", false);

    private static List<ClothesSizeOption> ClothesSizeOptions = Enum.GetValues(typeof(ClothingSize)).Cast<ClothingSize>().Select(cs => new ClothesSizeOption() { Size = cs }).ToList();

    private static List<SortOption> SortOptions = new List<SortOption>
    {
        new SortOption { Name = "ПОПУЛЯРНОСТИ", Type = "popularity" },
        new SortOption { Name = "НОВИЗНЕ", Type = "newest" },
        new SortOption { Name = "ЦЕНЕ", Type = "price" }
    };

    private async Task LoadProducts()
    {
        Navigation.NavigateTo($"/catalog/{Filter.ToQueryString()}");
        Products = await DataProvider.GetFilteredProducts(Filter);
    }

    private async Task OnFilterChanged(IFilterOption filter)
    {
        filter.IsSelected = !filter.IsSelected;

        if (filter is BrandModel brand)
        {
            if (brand.IsSelected)
            {
                Filter.Brands.Add(brand.Name);
            }
            else
            {
                Filter.Brands.Remove(brand.Name);
            }
        }
        else if (filter is GenderModel gender)
        {
            if (gender.IsSelected)
            {
                Filter.Gender = gender.Name;
            }
            else
            {
                Filter.Gender = null;
            }
        }
        else if (filter is SubCategoryModel subCategory)
        {
            if (subCategory.IsSelected)
            {
                Filter.SubCategories.Add(subCategory.Name);
            }
            else
            {
                Filter.SubCategories.Remove(subCategory.Name);
            }
        }
        else if (filter is SelCategoryModel selCategory)
        {
            if (selCategory.IsSelected)
            {
                Filter.SelCategory = selCategory.Name;
            }
            else
            {
                Filter.SelCategory = null;
            }
        }

        await LoadProducts();
    }

    private async Task OnSortOptionChanged(SortOption selectedSortOption)
    {
        CurrentSortOption = selectedSortOption;
        Filter.SortBy = selectedSortOption.Type;
        await LoadProducts();
    }

    private async Task ToggleSortDirection()
    {
        isSortDescending = !isSortDescending;
        Filter.IsAscending = !isSortDescending;
        await LoadProducts();
    }

    private async Task OnPriceChanged()
    {
        Filter.MinPrice = MinPriceInput;
        Filter.MaxPrice = MaxPriceInput;
        await LoadProducts();
    }

    private async Task OnSizeChanged()
    {
        // Implement logic to update Filter with size information
        await LoadProducts();
    }

    private async Task ResetFilters()
    {
        Filter = new ProductFilter();
        await LoadProducts();
    }

    private ProductFilter ParseFilter(string filterString)
    {
        var filter = new ProductFilter();
        var parameters = filterString.Split('&');
        foreach (var parameter in parameters)
        {
            var keyValue = parameter.Split('=');
            if (keyValue.Length == 2)
            {
                var key = keyValue[0];
                var value = keyValue[1];

                switch (key)
                {
                    case "Brands":
                        filter.Brands = value.Split(',').ToList();
                        break;
                    case "MinPrice":
                        filter.MinPrice = decimal.Parse(value);
                        break;
                    case "MaxPrice":
                        filter.MaxPrice = decimal.Parse(value);
                        break;
                    case "Gender":
                        filter.Gender = value;
                        break;
                    case "Category":
                        filter.Category = value;
                        break;
                    case "InStock":
                        filter.InStock = bool.Parse(value);
                        break;
                    case "Color":
                        filter.Color = value;
                        break;
                    case "SubCategories":
                        filter.SubCategories = value.Split(',').ToList();
                        break;
                    case "SelCategory":
                        filter.SelCategory = value;
                        break;
                    case "SortBy":
                        filter.SortBy = value;
                        break;
                    case "IsAscending":
                        filter.IsAscending = bool.Parse(value);
                        break;
                    case "Skip":
                        filter.Skip = int.Parse(value);
                        break;
                    case "Take":
                        filter.Take = int.Parse(value);
                        break;
                    case "MinSize":
                        filter.MinSize = int.Parse(value);
                        break;
                    case "MaxSize":
                        filter.MaxSize = int.Parse(value);
                        break;
                }
            }
        }
        return filter;
    }

    // Модели
    public interface IFilterOption
    {
        string Name { get; }
        bool IsSelected { get; set; }
    }

    public class BoolFilter : IFilterOption
    {
        public string Name { get; set; }
        public bool IsSelected { get; set; }

        public BoolFilter(string name, bool isSelected)
        {
            Name = name;
            IsSelected = isSelected;
        }
    }

    private class BrandModel : IFilterOption
    {
        public string Name { get; set; } = "Unitialized";
        public bool IsSelected { get; set; } = false;
    }

    private class SubCategoryModel : IFilterOption
    {
        public string Name { get; set; } = "Unitialized";
        public bool IsSelected { get; set; } = false;
    }

    private class SelCategoryModel : IFilterOption
    {
        public string Name { get; set; } = "Unitialized";
        public bool IsSelected { get; set; } = false;
    }

    public class GenderModel : IFilterOption
    {
        public string Name { get; set; } = "Unitialized";
        public bool IsSelected { get; set; } = false;
    }

    public class ClothesSizeOption : IFilterOption
    {
        public ClothingSize Size { get; set; }
        public string Name => Size.ToString();
        public bool IsSelected { get; set; }
    }

    public class SortOption
    {
        public string Name { get; set; }
        public string Type { get; set; }
        public bool IsHovered { get; set; } = false;
    }
}