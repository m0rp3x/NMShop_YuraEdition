@using NMShop.Client.Components;
@using NMShop.Client.Data;
@using NMShop.Client.Layout
@using NMShop.Shared.Models;
@inject HttpClient Http

@inject TestDataProvider DataProvider

@page "/catalog/{productType}"

<div style="width: 100%">
    <MudDrawerContainer Style="width: 100%; position:relative;">

        <MudDrawer Width="19vw" Height="100%" @bind-Open="@_isDrawerOpened" Elevation="0" Variant="@DrawerVariant.Persistent" Class="hovering pl-2 pr-6" Style="background-color: white;">

            <MudButton Style="flex-shrink: 0;" Class="py-1 px-3" Variant="Variant.Outlined" Color="Color.Dark">Сбросить фильтр</MudButton>

            <input placeholder="Найти"
                   style="font-size: 16px; width: 100%; height: 50px; color: #000000; font-weight: 400; padding: 0 22px; -webkit-appearance: none; border: 1px solid #BDBDBD; margin: 0; resize: none; border-radius: 25px;"
                   class="mt-3"
                   type="text"
                   @bind="SearchInput"
                   size="50" />

            <MudCheckBox Class="mt-3" @bind-Value="OnlyInStock"  Label="Только в наличии"/>

            <MudExpansionPanels Style="text-wrap: nowrap;" Class="mt-3" MultiExpansion="true">

                <MudExpansionPanel Text="Цена, ₽">

                    <div class="d-flex" style="gap: 15px;">

                        <MudTextField @bind-Value="MinPriceInput" Label="От" Variant="Variant.Outlined" />
                        <MudTextField @bind-Value="MaxPriceInput" Label="До" Variant="Variant.Outlined" />

                    </div>

                </MudExpansionPanel>

                <MudExpansionPanel Text="Бренды">
                    
                    @foreach (var brand in Brands)
                    {
                        <div>
                            <input type="checkbox"
                                   checked="@brand.IsSelected"
                                   @onchange="async () => await OnBrandSelectionChanged(brand)"
                                   id="@brand.Name" />
                            <label for="@brand.Name">@brand.Name</label>
                        </div>
                    }

                </MudExpansionPanel>

                <MudExpansionPanel Text="Пол">

                    @foreach (var gender in Genders)
                    {
                        <div>
                            <input type="checkbox"
                                   checked="@gender.IsSelected"
                                   @onchange="async () => await OnGenderSelectionChanged(gender)"
                                   id="@gender.Name" />
                            <label for="@gender.Name">@gender.Name</label>
                        </div>
                    }

                </MudExpansionPanel>

                <MudExpansionPanel Text="Рейтинг продаж">

                    @foreach (var selCat in SellingCategories)
                    {
                        <div>
                            <input type="checkbox"
                                   @bind="selCat.IsSelected"
                                   id="@selCat.Name" />
                            <label for="@selCat.Name">@selCat.Name</label>
                        </div>
                    }

                </MudExpansionPanel>

                <MudExpansionPanel Text="Товарная категория">

                    @foreach (var category in SubCategories)
                    {
                        <div class="category-checkbox">
                            <input type="checkbox"
                                   @bind="category.IsSelected"
                                   id="@category.Name" />
                            <label for="@category.Name">@category.Name</label>
                        </div>
                    }

                </MudExpansionPanel>

            </MudExpansionPanels>
        </MudDrawer>

        <div class="d-flex justify-center align-center mud-height-full flex-column pa-10">

            <div class="d-flex mb-20" style="width: 100%; gap: 30px;">

                <MudText Style="color: #BDBDBD;" Typo="Typo.h4">Найдено: @(Products.Count())</MudText>
                
                <MudSpacer/>

                <MudText Class="d-flex align-center px-4 py-2" Typo="Typo.h5"
                    @onmouseover="() => {_isFilterButtonHovered = true;}"
                     @onmouseout="() => {_isFilterButtonHovered = false;}"
                         @onclick="() => {_isDrawerOpened = !_isDrawerOpened;}"
                     style=@FilterButtonStyle>
                    @((_isDrawerOpened ? "скрыть" : "показать") + " фильтр")
                </MudText>

                <div @onclick="() => {_isSortOptionOpened = !_isSortOptionOpened;}" class="px-3 py-1 d-flex relative cursor-pointer" style="transition: all 0.6s ease 0s; -webkit-transition: all 0.6s ease 0s; border-radius: 20px;  box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.07); background-color: #FFFFFF; align-items: center; justify-content: center;">

                    <MudText Class="mr-2" Typo="Typo.h6" Inline="true">СОРТИРОВАТЬ ПО:</MudText>
                    <MudText Class="mr-2" Style="color: #BDBDBD;" Typo="Typo.h6" Inline="true">@CurrentSortOption.Name</MudText>
                    <MudIcon Style=@("transition: all 0.6s ease 0s; -webkit-transition: all 0.6s ease 0s; " + (_isSortOptionOpened ? "transform: rotateX(180deg);" : null)) Icon="@Icons.Material.Filled.KeyboardArrowDown" Size="Size.Small" />

                    <div class="absolute" style=@("transition: all 0.6s ease 0s; -webkit-transition: all 0.6s ease 0s; overflow: hidden; border-radius: 20px; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.07); left: 0; right: 0; z-index: " + (int)ZEnum.SortOptionsDropDown + "; " + (_isSortOptionOpened ? "top: 120%; height: fit-content;" : "height: 0px;"))>
                        @foreach (SortOption so in SortOptions)
                        {
                            <MudText @onclick="() => {CurrentSortOption = so;}"
                                     @onmouseover="() => {so.IsHovered = true;}"
                                     @onmouseout="() => {so.IsHovered = false;}"
                                     Style=@("transition: all 0.6s ease 0s; -webkit-transition: all 0.6s ease 0s;" + (so.IsHovered ? "color: white; background-color: black;" : "color: black; background-color: white;"))
                                     Class="pa-3 cursor-pointer" Typo="Typo.body1">@so.Name</MudText>
                        }
                    </div>
                </div>

                <div class="d-flex align-center" style="cursor: pointer;" @onclick="() => {isSortDescending = !isSortDescending;}">
                    @if (isSortDescending)
                    {
                        <svg width="24px" height="24px" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="bi bi-sort-down">
                            <path d="M3.5 2.5a.5.5 0 0 0-1 0v8.793l-1.146-1.147a.5.5 0 0 0-.708.708l2 1.999.007.007a.497.497 0 0 0 .7-.006l2-2a.5.5 0 0 0-.707-.708L3.5 11.293V2.5zm3.5 1a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5zM7.5 6a.5.5 0 0 0 0 1h5a.5.5 0 0 0 0-1h-5zm0 3a.5.5 0 0 0 0 1h3a.5.5 0 0 0 0-1h-3zm0 3a.5.5 0 0 0 0 1h1a.5.5 0 0 0 0-1h-1z"></path>
                        </svg>
                    }
                    else
                    {
                        <svg width="24px" height="24px" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="bi bi-sort-down-alt">
                            <path d="M3.5 3.5a.5.5 0 0 0-1 0v8.793l-1.146-1.147a.5.5 0 0 0-.708.708l2 1.999.007.007a.497.497 0 0 0 .7-.006l2-2a.5.5 0 0 0-.707-.708L3.5 12.293V3.5zm4 .5a.5.5 0 0 1 0-1h1a.5.5 0 0 1 0 1h-1zm0 3a.5.5 0 0 1 0-1h3a.5.5 0 0 1 0 1h-3zm0 3a.5.5 0 0 1 0-1h5a.5.5 0 0 1 0 1h-5zM7 12.5a.5.5 0 0 0 .5.5h7a.5.5 0 0 0 0-1h-7a.5.5 0 0 0-.5.5z"></path>
                        </svg>
                    }
                </div>
            </div>

            <ProductGrid Products="Products" Take="20" />
        </div>

    </MudDrawerContainer>
</div>

    @code {
    [Parameter]
    public string productType { get; set; }

    private IEnumerable<Product> Products = new List<Product>();

    protected override async Task OnInitializedAsync()
    {
        Products = await DataProvider.GetShoes();
    }

    private bool _isDrawerOpened = false;

    private bool _isFilterButtonHovered = false;

    private bool _isSortOptionOpened = false;

    private SortOption CurrentSortOption = SortOptions[0];

    private bool isSortDescending = true;

    private string FilterButtonStyle => 
    "transition: all 0.6s ease 0s; -webkit-transition: all 0.6s ease 0s; border-radius: 20px; cursor: pointer; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.07); text-transform: uppercase; font-size: 14px; border: none; line-height: 1; "
    + (_isFilterButtonHovered ? "color: black; background-color: white;" : "color: white; background-color: black;");

    private string MinPriceInput = string.Empty;

    private string MaxPriceInput = string.Empty;

    private bool OnlyInStock = false;

    private string SearchInput { get; set; } = String.Empty;

    private List<BrandModel> Brands;
    private List<GenderModel> Genders;

    protected override void OnInitialized()
    {
        // Инициализируем список брендов
        Brands = TestDataProvider.GetTestBrands()
            .Select(name => new BrandModel { Name = name})
            .ToList();
        
        Genders = TestDataProvider.GetTestGenders()
            .Select(name => new GenderModel { Name = name})
            .ToList();

        


    }
    
    
    
    
    private async Task LoadProducts()
    {
        var queryParams = new Dictionary<string, string>();

        // Gather selected filter inputs
        var selectedBrands = GetSelectedBrands();
        if (selectedBrands.Any())
        {
            queryParams["Brand"] = string.Join(",", selectedBrands);
        }

        var selectedGenders = GetSelectedGenders();
        if (selectedGenders.Any())
        {
            queryParams["Gender"] = string.Join(",", selectedGenders);
        }

        if (!string.IsNullOrEmpty(MinPriceInput)) queryParams["MinPrice"] = MinPriceInput;
        if (!string.IsNullOrEmpty(MaxPriceInput)) queryParams["MaxPrice"] = MaxPriceInput;
        if (OnlyInStock) queryParams["InStock"] = "true";

        // Construct query string and call API
        var queryString = string.Join("&", queryParams.Select(kv => $"{kv.Key}={kv.Value}"));
        var url = $"https://localhost:7279/api/products/filter?{queryString}";

        Products = await Http.GetFromJsonAsync<IEnumerable<Product>>(url);
    }
    
    private async Task OnBrandSelectionChanged(BrandModel brand)
    {
        brand.IsSelected = !brand.IsSelected; // Toggle the selection
        await LoadProducts(); // Load products immediately
        StateHasChanged(); // Ensure the UI reflects changes instantly
    }
    
    private async Task OnGenderSelectionChanged(GenderModel gender)
    {
        gender.IsSelected = !gender.IsSelected; // Toggle the selection
        await LoadProducts(); // Load products immediately
        StateHasChanged(); // Ensure the UI reflects changes instantly
    }
    
    



    // Метод для получения выбранных брендов
    private IEnumerable<string> GetSelectedBrands()
    {
        return Brands.Where(b => b.IsSelected).Select(b => b.Name);
    }

    // Метод для получения выбранных вариантов пола
    private IEnumerable<string> GetSelectedGenders()
    {
        return Genders.Where(g => g.IsSelected).Select(g => g.Name);
    }

    private class BrandModel
    {
        public string Name = "Unitialized";
        public bool IsSelected = false;
    }
    
    
    public class GenderModel
    {
        public string Name = "Unitialized";
        public bool IsSelected = false;
    }

    public class CategoryOption
    {
        public string Name { get; set; }
        public bool IsSelected { get; set; }
    }

    public class ProductCategory
    {
        public string Name { get; set; }
        public bool IsSelected { get; set; }
    }

    public class SortOption
    {
        public string Name { get; set; }
        public string Type { get; set; }
        public bool IsHovered { get; set; } = false;
    }


    // Список категорий с их состоянием выбора
    private static List<CategoryOption> SellingCategories = new List<CategoryOption>
        {
            new CategoryOption { Name = "Новые релизы", IsSelected = false },
            new CategoryOption { Name = "Хиты продаж", IsSelected = false },
            new CategoryOption { Name = "Коллаборации", IsSelected = false },
            new CategoryOption { Name = "Эксклюзивы", IsSelected = false },
            new CategoryOption { Name = "Маст-хэв", IsSelected = false }
        };

    private static List<ProductCategory> SubCategories = new List<ProductCategory>
        {
            new ProductCategory { Name = "Кеды и Кроссовки", IsSelected = false },
            new ProductCategory { Name = "Ботинки и Угги", IsSelected = false },
            new ProductCategory { Name = "Слайды", IsSelected = false },
            new ProductCategory { Name = "Детское", IsSelected = false }
        };

   

    private static List<SortOption> SortOptions = new List<SortOption>
    {
        new SortOption { Name = "ПОПУЛЯРНОСТИ", Type = "popularity" },
        new SortOption { Name = "НОВИЗНЕ", Type = "newest" },
        new SortOption { Name = "ЦЕНЕ", Type = "price" }
    };
}
