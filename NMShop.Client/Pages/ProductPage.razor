@using NMShop.Client.Layout
@using NMShop.Shared.Models
@using NMShop.Client.Data

@inject TestDataProvider DataProvider
@inject NavigationManager Navigation

@page "/catalog/{productType}/{productCode}"

<MudContainer Class="mt-10" MaxWidth="MaxWidth.ExtraLarge">
    <div class="d-flex relative" style=@($"color: #666666; gap: 7px; z-index: {(int)ZEnum.ProductPath};")>
        <MudLink Typo="Typo.h5" Color="Color.Inherit" Href="/catalog">Каталог</MudLink>
        /
        <MudLink Typo="Typo.h5" Color="Color.Inherit" Href=@($"/catalog/{productType}")>@productType.Localize()</MudLink>
        /
        <MudText Typo="Typo.h5" Color="Color.Inherit" >@product.Article</MudText>
        <MudSpacer/>
    </div>
    <MudGrid>
        <MudItem xs="8">
            <MudCarousel Class="" Style="aspect-ratio: 1/0.75;" ShowArrows="true" ShowBullets="true" EnableSwipeGesture="true" AutoCycle="false" TData="object">
                @foreach (ProductImage pi in product.Images)
                {
                    <MudCarouselItem Transition="Transition.Fade" Class="d-flex">
                        <img class="d-flex flex-grow-1" src="@pi.Bytes.ToSrcString()" style="margin: 80px; max-width: calc(100% - 160px); height: auto; object-position: center; object-fit: cover;" />
                    </MudCarouselItem>
                }
            </MudCarousel>
        </MudItem>
        <MudItem xs="4" Class="d-flex flex-column">

            <div class="mb-2">
                @if (minDiscountPrice is not null)
                {
                    <MudText Typo="Typo.body1" Style="width: fit-content; border-radius: 8px; background-color: #ff6b3150;" Class="px-2 py-1">Sale</MudText>
                }
                @if (product.Gender == "female")
                {
                    <MudText Typo="Typo.body1" Style="width: fit-content; border-radius: 8px; background-color: #ff60b850;" Class="px-2 py-1">Женский</MudText>
                }
            </div>

            <MudText Typo="Typo.h3">@product.Name</MudText>

            <div class="my-5" style="gap: 23px;">
                @if (willShowDiscountPrice)
                {
                    <MudText Typo="Typo.h4" Style="line-height: 100%;" Color="Color.Error">
                        <MudText Inline="true" Typo="Typo.h4" Style="line-height: 100%; font-weight: 800;" Color="Color.Error">@minDiscountPrice.ToPreFormatedString()</MudText> ₽
                    </MudText>
                }

                <MudText Typo="Typo.h4" Color="Color.Dark" Style=@("line-height: 100%; font-weight: 700;" + (willShowDiscountPrice ? "text-decoration: line-through; text-decoration-color: red;" : null))>@minPrice.ToPreFormatedString() ₽</MudText>
            </div>

            <MudText Class="d-flex align-center justify-center px-4 py-4 mb-4" Typo="Typo.h5"
                     @onmouseover="() => {_isAddToCartButtonHovered = true;}"
                     @onmouseout="() => {_isAddToCartButtonHovered = false;}"
                     @onclick="() => {Console.WriteLine('A');}"
                     style=@FilterButtonStyle>
                Добавить в корзину
            </MudText>

            @if (product.ProductType == "shoes" || product.ProductType == "clothes")
            {

                <MudText Typo="Typo.h5" Class="mx-auto" Style="font-weight: 700; width: fit-content;">Размеры:</MudText>

                <div class="mud-divider-fullwidth mt-3 mb-7" style="min-height: 2px; max-height: 2px; background-color: rgba(26, 26, 26, 1);" />

                <MudGrid Class="mb-7">

                    @foreach (PriceInfo pi in product.PriceInfos)
                    {
                        bool isDiscounted = pi.DiscountPrice is not null && pi.DiscountPrice > 0;

                        <MudItem xs="3" >
                            <div @onmouseout="() => {pi.isHovered = false;}" @onmouseover="() => {pi.isHovered = true;}" @onclick="() => {seletedSize = pi;}" class="pa-1 d-flex flex-column align-center cursor-pointer" style=@($"transition: all 0.6s ease 0s; -webkit-transition: all 0.6s ease 0s; border-radius: 4px; background-color: " + (seletedSize == pi ? "rgba(26, 26, 26, 1)" : (pi.isHovered ? "#E6E6E6" : "#f2f2f2")) + ';')>
                                <MudText Style=@("line-height: 1.2; color: " + (seletedSize == pi ? "white" : "black") + ';') Typo="Typo.h5">@(product.ProductType == "clothes" ? (ClothingSize)(int)pi.Size : pi.Size)</MudText>
                                <MudText Style=@("line-height: 1.2; color: " + (isDiscounted ? "rgba(153, 153, 153, 1)" : "#CA0D0D") + ';') Typo="Typo.h6">@(isDiscounted ? pi.DiscountPrice.ToPreFormatedString() : pi.Price) ₽</MudText>
                            </div>
                        </MudItem>
                    }

                </MudGrid>
            }


            <MudText Style="background-color: #baff2450; border-radius: 8px;" Class="px-2 py-1 mt-auto mb-10" Typo="Typo.h6">Товар прошел проверку на качество и оригинальность</MudText>

        </MudItem>
    </MudGrid>

    <div >

        <div class="d-flex mb-7">

            @foreach(var infoButton in InfoButtons)
            {
                <MudButton OnClick="() => {selectedInfo = infoButton;}" Style=@("border-radius: 0; border-bottom: 1px solid " + (selectedInfo == infoButton ? "black;" : "#E6E6E6;"))>
                    <MudText Typo="Typo.h5" Style="font-weight: 500;">@infoButton.Label</MudText>
                </MudButton>
            }

        </div>

        <div class="mb-7">
            @if (selectedInfo.Code == "details")
            {

                <MudGrid Spacing="10" Justify="Justify.SpaceBetween">

                    <MudItem xs="8">
                        <MudText Typo="Typo.h6">
                            @product.Description
                        </MudText>
                    </MudItem>

                    <MudItem xs="4">

                        <div class="d-flex align-center" style="border-bottom: 1px solid #E6E6E6;">
                            <MudText Typo="Typo.h6" Style="color: #666666;">Артикул</MudText>

                            <MudSpacer />

                            <MudText Typo="Typo.h5">@product.Article</MudText>
                            <MudIconButton Class="ml-3" Icon="@Icons.Material.Filled.ContentCopy" />
                        </div>

                        <div class="d-flex align-center" style="border-bottom: 1px solid #E6E6E6;">
                            <MudText Typo="Typo.h6" Style="color: #666666;">Бренд</MudText>

                            <MudSpacer />

                            <MudText Typo="Typo.h5">@product.Brand</MudText>
                            <MudIconButton Class="ml-3" Icon="@Icons.Material.Filled.ArrowForwardIos" />
                        </div>

                    </MudItem>

                </MudGrid>

            }
            else
            {
                <div class="d-flex flex-column" style="gap: 10px;">
                    @foreach (var content in refInfoList.Where(u => u.Topic == selectedInfo.Code).SingleOrDefault().Contents)
                    {
                        <MudText Style=@(content.IsBold ? "font-weight: bold;" : null) Typo=@(content.Size.ToEnum<Typo>())>@content.Text</MudText>
                    }
                </div>
            }
        </div>

    </div>


    <MudPaper Class="pa-4" Elevation="0" Style="text-align: center;  margin-top: 120px; margin-bottom: 120px;">
        <MudText Typo="Typo.h5" Class="mb-2">ПРОДОЛЖИТЬ ПОКУПКИ</MudText>
        <MudText Typo="Typo.body1" Align="Align.Center" Style="max-width: 600px; margin: 30px auto; word-wrap: break-word;">
             Найдите то, что вы хотите, в один клик. Всего один клик, не стесняйтесь продолжить.
        </MudText>

        <MudGrid Justify="Justify.Center">
            <MudItem>
                <MudButton Variant="Variant.Outlined" Color="Color.Dark" Class="w-100">ПОИСК</MudButton>
            </MudItem>
            <MudItem>
                <MudButton Variant="Variant.Outlined" Color="Color.Dark" EndIcon="@Icons.Material.Filled.ArrowForward" Class="w-100">
                    ВЕРНУТЬСЯ В КАТЕГОРИЮ
                </MudButton>
            </MudItem>
        </MudGrid>

    </MudPaper>
    

</MudContainer>

@code {
    [Parameter]
    public string productType { get; set; }
    [Parameter]
    public string productCode { get; set; }

    private Product product = new();

    private bool _isAddToCartButtonHovered = false;

    private PriceInfo seletedSize = new();

    private InfoButton selectedInfo = InfoButtons[0];

    private IEnumerable<ReferenceInfo> refInfoList = new ReferenceInfo[0];

    decimal minPrice;
    decimal? minDiscountPrice;
    bool willShowDiscountPrice => minDiscountPrice is not null && minDiscountPrice != 0 && minDiscountPrice < minPrice;


    private string FilterButtonStyle =>
    "transition: all 0.6s ease 0s; -webkit-transition: all 0.6s ease 0s; border-radius: 20px; cursor: pointer; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.07); text-transform: uppercase; font-size: 14px; border: none; line-height: 1; "
    + (_isAddToCartButtonHovered ? "color: black; background-color: white;" : "color: white; background-color: black;");

    protected override async Task OnInitializedAsync()
    {
        var parsedSuccesfully = int.TryParse(productCode, out var parsedId);
        if (parsedSuccesfully)
        {
            product = await DataProvider.GetById(parsedId);

            (minPrice, minDiscountPrice) = product.GetMinPriceAndDiscount();
        }
        else Navigation.NavigateTo("/notFound");

        refInfoList = await DataProvider.GetAllReferenceInfo();
    }

    class InfoButton
    {
        public string Label;
        public string Code;
    }

    static List<InfoButton> InfoButtons = new()
    {
        new(){ Label = "Детали", Code = "details" },
        new(){ Label = "Способы доставки", Code = "delivery_methods" },
        new(){ Label = "Правила возврата", Code = "return_policy" },
        new(){ Label = "Способы оплат", Code = "payment_methods" },
        new(){ Label = "FAQ", Code = "faq" },

    };

}
