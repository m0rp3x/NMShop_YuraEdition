@using NMShop.Client.Layout
@using NMShop.Shared.Models
@using NMShop.Client.Services
@using NMShop.Client.Components
@using ProductImage = NMShop.Shared.Models.ProductImage
@using NMShop.Shared.Scaffold

@inject ClientDataProvider DataProvider
@inject NavigationManager Navigation
@inject CartService CartService
@inject SearchService SearchService
@inject IJSRuntime JS

@page "/catalog/{productParentType}/{article}"

<PageTitle>@product.Name</PageTitle>

<MudContainer Class="mt-10" MaxWidth="MaxWidth.ExtraLarge">
    <div class="d-flex relative" style=@($"color: #666666; gap: 7px; z-index: {(int)ZEnum.ProductPath};")>
        <MudLink Typo="Typo.h5" Color="Color.Inherit" Href="/catalog">Каталог</MudLink>
        /
        <MudLink Typo="Typo.h5" Color="Color.Inherit" Href=@("/catalog/" + new ProductFilter(){CategoryId = parentTypeId}.ToQueryString())>@productParentType</MudLink>
        /
        <MudText Typo="Typo.h5" Color="Color.Inherit" >@product.Article</MudText>
        <MudSpacer/>
    </div>
    <MudGrid>
        <MudItem xs="12" md="8">
            <MudCarousel Class="" Style="aspect-ratio: 1/0.75;" ShowArrows="true" ShowBullets="true" EnableSwipeGesture="true" AutoCycle="false" TData="object">
                @foreach (ProductImage pi in (product.Images.Count() < 1 ? new() { new() } : product.Images))
                {
                    <MudCarouselItem Transition="Transition.Fade" Class="d-flex">
                        <img class="d-flex flex-grow-1" src="@pi.Bytes.ToSrcString()" style="margin: 1vw; max-width: calc(100% - 2vw); height: auto; object-position: center; object-fit: cover;" />
                    </MudCarouselItem>
                }
            </MudCarousel>
        </MudItem>
        <MudItem xs="12" md="4" Class="d-flex flex-column">

            <div class="mb-2 d-flex" style="gap: 7px;">
                @if (product.HasDiscount)
                {
                    <MudText Typo="Typo.body1" Style="width: fit-content; border-radius: 8px; background-color: #ff6b3150;" Class="px-2 py-1">Sale</MudText>
                }
                @if (product.Gender == "Женский")
                {
                    <MudText Typo="Typo.body1" Style="width: fit-content; border-radius: 8px; background-color: #ff60b850;" Class="px-2 py-1">Женский</MudText>
                }
            </div>

            <MudText Typo="Typo.h3">@product.Name</MudText>

            <div class="my-5" style="gap: 23px;">
                @if (seletedSize != null)
                {

                    @if (seletedSize.DiscountPrice.HasValue)
                    {
                        <MudText Typo="Typo.h4" Style="line-height: 100%;" Color="Color.Error">
                            <MudText Inline="true" Typo="Typo.h4" Style="line-height: 100%; font-weight: 800;" Color="Color.Error">@seletedSize.DiscountPrice.ToPreFormatedString()</MudText> ₽
                        </MudText>
                    }

                    <MudText Typo="Typo.h4" Color="Color.Dark" Style=@("line-height: 100%; font-weight: 700;" + (product.HasDiscount ? "text-decoration: line-through; text-decoration-color: red;" : null))>@seletedSize.Price.ToPreFormatedString() ₽</MudText>
                }
            </div>

            <MudText Class="d-flex align-center justify-center px-4 py-4 mb-4" Typo="Typo.h5"
                     @onmouseover="() => {_isAddToCartButtonHovered = true;}"
                     @onmouseout="() => {_isAddToCartButtonHovered = false;}"
                     @onclick="() => {
                                        if(selectedInfo != null) {
                                            CartService.AddProduct(product, seletedSize);
                                            CartService.ToggleCart();}
                                     }"
                     style=@AddToCartButtonStyle>
                Добавить в корзину
            </MudText>

            @if (product.SizeDisplayType != "none")
            {

                <MudText Typo="Typo.h5" Class="mx-auto" Style="font-weight: 700; width: fit-content;">Размеры:</MudText>

                <div class="mud-divider-fullwidth mt-3 mb-7" style="min-height: 2px; max-height: 2px; background-color: rgba(26, 26, 26, 1);" />

                <MudGrid Class="mb-7" Spacing="0">

                    @foreach (PriceInfo pi in product.PriceInfos.OrderBy(p => p.Size))
                    {
                        bool isDiscounted = pi.DiscountPrice is not null && pi.DiscountPrice > 0;

                        <MudItem xs="4" md="3" Class="pa-2" >
                            <div @onmouseout="() => {pi.isHovered = false;}" @onmouseover="() => {pi.isHovered = true;}" @onclick="() => {seletedSize = pi;}" class="pa-1 d-flex flex-column align-center cursor-pointer" style=@($"transition: all 0.6s ease 0s; -webkit-transition: all 0.6s ease 0s; border-radius: 4px; background-color: " + (seletedSize == pi ? "rgba(26, 26, 26, 1)" : (pi.isHovered ? "#E6E6E6" : "#f2f2f2")) + ';')>
                                <MudText Style=@("text-wrap: nowrap; line-height: 1.2; color: " + (seletedSize == pi ? "white" : "black") + ';') Typo="Typo.h6">@(product.SizeDisplayType == "string" ? (ClothingSize)(int)pi.Size : pi.Size)</MudText>
                                <MudText Style=@("text-wrap: nowrap; line-height: 1.2; color: " + (!isDiscounted ? "rgba(153, 153, 153, 1)" : "#CA0D0D") + ';') Typo="Typo.body1">@(isDiscounted ? pi.DiscountPrice.ToPreFormatedString() : pi.Price) ₽</MudText>
                            </div>
                        </MudItem>
                    }

                </MudGrid>
            }


            <MudText Style="background-color: #baff2450; border-radius: 8px;" Class="px-2 py-1 mt-auto mb-6 mb-md-8 mb-lg-10" Typo="Typo.h5">Товар прошел проверку на качество</MudText>

        </MudItem>
    </MudGrid>

    <div class="mb-2" style="width: 100%; box-sizing: border-box;">

        <div class="d-flex" style="overflow-x: scroll; max-width: 100%; box-sizing: border-box;">

            @foreach(var ib in InfoButtons)
            {
                <MudButton OnClick="() => OnInfoButtonClick(ib)" Style=@("min-width: fit-content; border-radius: 0; border-bottom: 1px solid " + (selectedInfo == ib ? "black;" : "#E6E6E6;"))>
                    <MudText Typo="Typo.h5" Style="text-wrap: nowrap; font-weight: 500;">@ib.Label</MudText>
                </MudButton>
            }

        </div>

        <div class="pa-2">
            @if (selectedInfo.Code == null)
            {

                <MudGrid Spacing="10" Justify="Justify.SpaceBetween">

                    <MudItem xs="12" md="8">
                        <MudText Typo="Typo.h6">
                            @product.Description
                        </MudText>
                    </MudItem>

                    <MudItem xs="12" md="4">

                        <div class="d-flex align-center" style="border-bottom: 1px solid #E6E6E6;">
                            <MudText Typo="Typo.h6" Style="color: #666666;">Артикул</MudText>

                            <MudSpacer />

                            <MudText Typo="Typo.h5">@product.Article</MudText>
                            <MudIconButton  OnClick="CopyArticleToClipboard" Class="ml-3" Icon="@Icons.Material.Filled.ContentCopy" />
                        </div>

                        <div class="d-flex align-center" style="border-bottom: 1px solid #E6E6E6;">
                            <MudText Typo="Typo.h6" Style="color: #666666;">Бренд</MudText>

                            <MudSpacer />

                            <MudButton Variant="Variant.Text" @onclick="() => RedirectToBrandPageByName(product.Brand)" Class="ml-3">
                                <MudText Typo="Typo.h5">@product.Brand</MudText>
                                <MudIcon Icon="@Icons.Material.Filled.ArrowForwardIos" />
                            </MudButton>

                        </div>

                    </MudItem>

                </MudGrid>

            }
            else
            {
                <div class="d-flex flex-column" style="gap: 10px;">

                    <ReferenseInfoList Code="@selectedInfo.Code" />

                </div>
            }
        </div>

    </div>


    <MudPaper Class="pa-4 my-13 my-md-15 my-lg-17" Elevation="0" Style="text-align: center;">
        <MudText Typo="Typo.h5" Class="mb-2">ПРОДОЛЖИТЬ ПОКУПКИ</MudText>
        <MudText Typo="Typo.body1" Align="Align.Center" Style="max-width: 600px; margin: 30px auto; word-wrap: break-word;">
            Найдите то, что вы хотите, в один клик. Всего один клик, не стесняйтесь продолжить.
        </MudText>

        <div style="display: flex; gap: 16px; justify-content: center; margin-top: 20px;">
            <MudButton OnClick="SearchService.ToggleSearch" Variant="Variant.Outlined" Color="Color.Dark" Style="">
                ПОИСК
            </MudButton>

            <MudButton Variant="Variant.Outlined" Href="@GetCategoryUrl()" Color="Color.Dark" EndIcon="@Icons.Material.Filled.ArrowForward" Style="width: fit-content;">
                Вернуться в категорию
            </MudButton>
        </div>
    </MudPaper>

    

</MudContainer>

@code {
    [Parameter] public string productParentType { get; set; }
    [Parameter] public string article { get; set; }
    [Parameter] public string brandID { get; set; }

    private ProductDto product = new();
    private int? parentTypeId;
    private int? brandId;

    private bool _isAddToCartButtonHovered = false;

    private PriceInfo? seletedSize;

    private IEnumerable<ReferenceTopic> refInfoList = new List<ReferenceTopic>();

    static List<InfoButton> InfoButtons = new ();

    private InfoButton selectedInfo = new();

    private bool _isRedirecting = false;

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(article))
        {
            product = await DataProvider.GetProductByArticleAsync(article);
            parentTypeId = await DataProvider.GetCategoryIdByNameAsync(productParentType);
            var lowestPriceInfo = product.PriceInfos.OrderBy(pi => pi.DiscountPrice ?? pi.Price).FirstOrDefault();
            if (lowestPriceInfo != null)
            {
                seletedSize = lowestPriceInfo;
            }

            if(InfoButtons.Count() == 0)
            {
                InfoButtons = new List<InfoButton> { new() { Label = "Детали", Code = null } };
                selectedInfo = InfoButtons.FirstOrDefault();
                refInfoList = await DataProvider.GetChildTopicsByParentCodeAsync("product_page_reference_info");
                InfoButtons = InfoButtons.Concat(refInfoList.Select(rt => new InfoButton { Label = rt.Name, Code = rt.Code })).ToList();
            }
            
        }
        else Navigation.NavigateTo("/notFound");
    }

    private string GetCategoryUrl()
    {
        return "/catalog/" + new ProductFilter() { CategoryId = parentTypeId }.ToQueryString();
    }

    private async Task RedirectToBrandPageByName(string brandName)
    {
        var brandId = await DataProvider.GetBrandIdByNameAsync(brandName);

        if (brandId.HasValue)
        {
            var url = "/catalog/" + new ProductFilter() { BrandIds = new List<int> { brandId.Value } }.ToQueryString();
            Navigation.NavigateTo(url);
        }
        else
        {
            Navigation.NavigateTo("/notFound");
        }
    }

    private string AddToCartButtonStyle =>
        "transition: all 0.6s ease 0s; -webkit-transition: all 0.6s ease 0s; border-radius: 20px; cursor: pointer; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.07); text-transform: uppercase; font-size: 14px; border: none; line-height: 1; "
        + (_isAddToCartButtonHovered ? "color: black; background-color: white;" : "color: white; background-color: black;");

    private async Task OnInfoButtonClick(InfoButton infoButton)
    {
        selectedInfo = infoButton;
    }

    private async Task CopyArticleToClipboard()
    {
        await JS.InvokeVoidAsync("navigator.clipboard.writeText", product.Article);
    }

    class InfoButton
    {
        public string Label = "Детали";
        public string? Code = null;
    }

}