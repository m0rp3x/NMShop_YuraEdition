@using NMShop.Shared.Models
@using NMShop.Client.Data

@inject TestDataProvider DataProvider
@inject NavigationManager Navigation

@page "/catalog/{productType}/{productCode}"

<MudContainer Class="mt-10" MaxWidth="MaxWidth.ExtraLarge">
    <div class="d-flex" style="gap: 7px;">
        <MudLink Typo="Typo.h5" Href="/catalog">Каталог</MudLink>
        /
        <MudLink Typo="Typo.h5" Href=@($"/catalog/{productType}")>@productType.Localize()</MudLink>
        /
        <MudText Typo="Typo.h5">@productCode</MudText>
        <MudSpacer/>
    </div>
    <MudGrid>
        <MudItem xs="8">
            <MudCarousel Class="" Style="aspect-ratio: 1/0.75;" ShowArrows="true" ShowBullets="true" EnableSwipeGesture="true" AutoCycle="false" TData="object">
                @foreach (ProductImage pi in product.Images)
                {
                    <MudCarouselItem Transition="Transition.Fade" Class="d-flex">
                        <img class="d-flex flex-grow-1" src="@pi.Bytes.ToSrcString()" style="margin: 80px; max-width: calc(100% - 160px); height: auto; object-position: center; object-fit: cover;" />
                    </MudCarouselItem>
                }
            </MudCarousel>
        </MudItem>
        <MudItem xs="4">

            <div class="mb-2">
                @if (minDiscountPrice is not null)
                {
                    <MudText Typo="Typo.body1" Style="width: fit-content; border-radius: 8px; background-color: #ff6b3150;" Class="px-2 py-1">Sale</MudText>
                }
                @if (product.Gender == "female")
                {
                    <MudText Typo="Typo.body1" Style="width: fit-content; border-radius: 8px; background-color: #ff60b850;" Class="px-2 py-1">Женский</MudText>
                }
            </div>

            @if (willShowDiscountPrice)
            {
                <MudText Typo="Typo.h3" Style="line-height: 100%;" Color="Color.Error">
                    <MudText Inline="true" Typo="Typo.h3" Style="line-height: 100%; font-weight: 800;" Color="Color.Error">@minDiscountPrice.ToPreFormatedString()</MudText> ₽
                </MudText>
            }

            <MudText Class="mb-2" Typo="Typo.h4" Color="Color.Dark" Style=@("line-height: 100%; font-weight: 700;" + (willShowDiscountPrice ? "text-decoration: line-through; text-decoration-color: red;" : null))>@minPrice.ToPreFormatedString() ₽</MudText>

            <MudText Class="d-flex align-center justify-center px-4 py-4" Typo="Typo.h5"
                     @onmouseover="() => {_isAddToCartButtonHovered = true;}"
                     @onmouseout="() => {_isAddToCartButtonHovered = false;}"
                     @onclick="() => {Console.WriteLine('A');}"
                     style=@FilterButtonStyle>
                Добавить в корзину
            </MudText>

            @if (product.ProductType == "shoes" || product.ProductType == "clothes")
            {
                <MudText Typo="Typo.h5">Размеры в наличии:</MudText>

                <MudGrid Class="mb-7">

                    @foreach (PriceInfo pi in product.PriceInfos)
                    {
                        bool isDiscounted = pi.DiscountPrice is not null && pi.DiscountPrice > 0;

                        <MudItem xs="3" >
                            <div @onclick="() => {seletedOption = pi;}" class="px-2 py-1 d-flex flex-column align-center cursor-pointer" style=@($"border-radius: 4px; background-color: " + (seletedOption == pi ? "rgba(26, 26, 26, 1)" : "#E6E6E6") + ';')>
                                <MudText Style=@("color: " + (seletedOption == pi ? "white" : "black") + ';') Typo="Typo.h5">@(product.ProductType == "clothes" ? (ClothingSize)(int)pi.Size : pi.Size)</MudText>
                                <MudText Style=@("color: " + (isDiscounted ? "rgba(153, 153, 153, 1)" : "#CA0D0D") + ';') Typo="Typo.h6">@(isDiscounted ? pi.DiscountPrice.ToPreFormatedString() : pi.Price) ₽</MudText>
                            </div>
                        </MudItem>
                    }

                </MudGrid>

                <MudText Style="background-color: #baff2450;" Class="px-2 py-1" Typo="Typo.h6">Товар прошел проверку на качество и оригинальность</MudText>
            }

        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    [Parameter]
    public string productType { get; set; }
    [Parameter]
    public string productCode { get; set; }

    private Product product = new();

    private bool _isAddToCartButtonHovered = false;

    private PriceInfo seletedOption = new();

    decimal minPrice;
    decimal? minDiscountPrice;
    bool willShowDiscountPrice => minDiscountPrice is not null && minDiscountPrice != 0 && minDiscountPrice < minPrice;


    private string FilterButtonStyle =>
    "transition: all 0.6s ease 0s; -webkit-transition: all 0.6s ease 0s; border-radius: 20px; cursor: pointer; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.07); text-transform: uppercase; font-size: 14px; border: none; line-height: 1; "
    + (_isAddToCartButtonHovered ? "color: black; background-color: white;" : "color: white; background-color: black;");

    protected override async Task OnInitializedAsync()
    {
        var parsedSuccesfully = int.TryParse(productCode, out var parsedId);
        if (parsedSuccesfully)
        {
            product = await DataProvider.GetById(parsedId);

            (minPrice, minDiscountPrice) = product.GetMinPriceAndDiscount();
        }
        else Navigation.NavigateTo("/notFound");
    }

}
