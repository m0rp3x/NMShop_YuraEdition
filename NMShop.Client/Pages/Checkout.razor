@using NMShop.Client.Services
@using NMShop.Client.Components
@using NMShop.Shared.Scaffold
@using System.Text.RegularExpressions

@inject CartService CartService
@inject ClientDataProvider DataProvider
@page "/checkout"

<div>

    <MudText Class="mx-auto" Style="width: fit-content;" Typo="Typo.h5">ОФОРМЛЕНИЕ ЗАКАЗА</MudText>

    <div class="d-flex mx-auto pt-7" style="width: fit-content; gap: 25px;">

        <div class="pa-5 d-flex flex-column" style="gap: 13px;">

            <MudText Typo="Typo.h6" >ЛИЧНЫЕ ДАННЫЕ</MudText>
            <MudTextField Required="true" RequiredError="Обязательное поле" Label="Имя, фамилия" @bind-Value="Form.FIO" Variant="Variant.Filled" />
            <MudTextField Required="true" RequiredError="Обязательное поле" Label="Email" @bind-Value="Form.Email" Variant="Variant.Filled" />
            <MudSelect @bind-Value="Form.selectedContactMethod" Label="Способ звязи">
                @foreach (var cm in contactMethods)
                {
                    <MudSelectItem Value="cm">@cm.Name</MudSelectItem>
                }
            </MudSelect>
            @if (Form.selectedContactMethod != null && !string.IsNullOrEmpty(Form.selectedContactMethod.ValidationMask))
            {
                <MudTextField Label="Контакт" @bind-Value="Form.Contact" Variant="Variant.Filled"
                              Immediate="true" Error="!Regex.IsMatch(Form.Contact ?? string.Empty, Form.selectedContactMethod.ValidationMask)"
                              ErrorText="@Form.selectedContactMethod.ValidationErrorText" />
            }

            <div class="d-flex" style="gap: 13px;">
                <div style="gap: 13px;">
                    <MudText Typo="Typo.h6">СПОСОБ ДОСТАВКИ</MudText>
                    <MudRadioGroup Required="true" RequiredError="Обязательное поле" @bind-Value="Form.selectedDeliveryMethod">
                        @foreach (var dm in deliveryMethods)
                        {
                            <MudRadio Value="dm">@dm.Name</MudRadio>
                        }
                    </MudRadioGroup>
                </div>

                <div style="gap: 25px;">
                    <MudText Typo="Typo.h6">АДРЕС ДОСТАВКИ</MudText>
                    <MudTextField Required="true" RequiredError="Обязательное поле" Label="Город" @bind-Value="Form.Address" Variant="Variant.Filled" />
                    <MudTextField Required="true" RequiredError="Обязательное поле" Label="Адрес" @bind-Value="Form.Address" Variant="Variant.Filled" />
                    <MudTextField Required="true" RequiredError="Обязательное поле" Label="Регион" @bind-Value="Form.Region" Variant="Variant.Filled" />
                    <MudTextField Label="Индекс" @bind-Value="Form.Index" Variant="Variant.Filled" />
                </div>
            </div>

            <MudCheckBox T="bool" Label="Я получатель" @bind-Value="Form.IsClientRecipient" />

            @if (!Form.IsClientRecipient)
            {
                <MudTextField Required="!Form.IsClientRecipient" RequiredError="Обязательное поле" Label="ФИО Получателя" @bind-Value="Form.Recipient_FIO" Variant="Variant.Filled" />
                <MudTextField Required="!Form.IsClientRecipient" RequiredError="Обязательное поле" Label="Телефон Получателя" @bind-Value="Form.Recipient_Phone" Variant="Variant.Filled" />
            }

            <MudText Typo="Typo.h6">СПОСОБ ОПЛАТЫ</MudText>
            <MudRadioGroup Required="true" RequiredError="Обязательное поле" @bind-Value="Form.selectedPaymentMethod">
                @foreach (var pm in paymentMethods)
                {
                    <MudRadio Value="pm">@pm.Name</MudRadio>
                }
            </MudRadioGroup>

        </div>

        <div class="pa-5 d-flex flex-column" style="gap: 13px; background-color: #F8F8F8; border-radius: 5px;">

            <CartItemsGrid/>

            <MudText Typo="Typo.h6">ЕСЛИ У ВАС ЕСТЬ ПРОМОКОД, ВВЕДИТЕ ЕГО СЮДА</MudText>

            <div class="d-flex" style="gap: 15px;">
                <MudTextField Error="@(!string.IsNullOrEmpty(CartService.PromoCodeError))" ErrorText="CartService.PromoCodeError" @bind-Value="promo" Placeholder="Введите промокод" />
                <MudButton OnClick="async() => CartService.ApplyPromoCodeAsync(promo)" Variant="Variant.Filled" Color="Color.Primary">ПРИМЕНИТЬ</MudButton>
            </div>

            <div class="d-flex justify-space-between">
                <MudText Typo="Typo.h6">ОБЩАЯ СТОИМОСТЬ:</MudText>
                <MudText Typo="Typo.h5" Class="font-weight-bold">@CartService.GetTotalCartPriceWithoutDiscount().ToPreFormatedString() ₽</MudText>
            </div>

            <div class="d-flex justify-space-between">
                <MudText Typo="Typo.h6">СКИДКА @CartService.AppliedPromoCode.DiscountPercent %:</MudText>
                <MudText Typo="Typo.h5" Class="font-weight-bold">@CartService.GetTotalDiscount().ToPreFormatedString() ₽</MudText>
            </div>

            <div class="d-flex justify-space-between">
                <MudText Typo="Typo.h6" Class="font-weight-bold">ИТОГО:</MudText>
                <MudText Typo="Typo.h5" Class="font-weight-bold">@CartService.GetTotalCartPrice().ToPreFormatedString() ₽</MudText>
            </div>

            <MudButton @onmouseover="() => {_isFinalButtonHovered = true;}"
                       @onmouseout="() => {_isFinalButtonHovered = false;}"
                Variant="Variant.Filled" 
                Color="Color.Primary" 
                Class="py-3"
                Style=@FinalButtonStyle>ОФОРМИТЬ ЗАКАЗ</MudButton>

            <MudText Typo="Typo.body2" Color="Color.Secondary">
                Оформляя заказ, Вы подтверждаете согласие с <MudLink Href="#">Пользовательским соглашением</MudLink>,<br /><MudLink Href="#">Политикой конфиденциальности</MudLink> и <MudLink Href="#">Договором оферты</MudLink>.
            </MudText>

        </div>
    </div>

</div>




@code {
    private CheckoutForm Form = new();
    private string promo = string.Empty;

    private bool _isFinalButtonHovered = false;

    private string FinalButtonStyle =>
    "width: 100%; transition: all 0.6s ease 0s; -webkit-transition: all 0.6s ease 0s; border-radius: 20px; cursor: pointer; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.07); text-transform: uppercase; font-size: 14px; border: none; line-height: 1.5; "
    + (_isFinalButtonHovered ? "color: black; background-color: white;" : "color: white; background-color: black;");

    private IEnumerable<ContactMethod> contactMethods = new List<ContactMethod>();
    private IEnumerable<DeliveryType> deliveryMethods = new List<DeliveryType>();
    private IEnumerable<PaymentType> paymentMethods = new List<PaymentType>();

    private RegexMask GetCurrentRegexMask => new RegexMask($"^{Form.selectedContactMethod.ValidationMask}$");

    private string PromoCodeErrorText = String.Empty;

    protected override async Task OnInitializedAsync()
    {
        contactMethods = await DataProvider.GetContactMethodsAsync();
        deliveryMethods = await DataProvider.GetDeliveryTypesAsync();
        paymentMethods = await DataProvider.GetPaymentTypesAsync();
        promo = CartService.AppliedPromoCode.Code;
    }

    public class CheckoutForm
    {
        public string? FIO { get; set; }
        public string? Contact { get; set; }
        public string? Email { get; set; }
        public string? City { get; set; }
        public string? Address { get; set; }
        public string? Region { get; set; }
        public string? Index { get; set; }
        public string? Recipient_FIO { get; set; }
        public string? Recipient_Phone { get; set; }
        public bool IsClientRecipient { get; set; } = true;

        public ContactMethod? selectedContactMethod;
        public DeliveryType? selectedDeliveryMethod;
        public PaymentType? selectedPaymentMethod;
    }
}
