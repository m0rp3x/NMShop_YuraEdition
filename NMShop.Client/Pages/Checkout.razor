@using NMShop.Client.Services
@using NMShop.Client.Components
@using NMShop.Shared.Scaffold
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations

@implements IDisposable

@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject CartService CartService
@inject ClientDataProvider DataProvider

@page "/checkout"

<div>

    <MudText Class="mx-auto" Style="width: fit-content;" Typo="Typo.h5">ОФОРМЛЕНИЕ ЗАКАЗА</MudText>

    <div class="d-flex mx-auto pt-7" style="width: fit-content; gap: 25px;">

        <MudForm @ref="checkoutForm" @bind-IsValid="isFormValid" @bind-Errors="@errors">
            <div class="pa-5 d-flex flex-column" style="gap: 13px;">

                <MudText Typo="Typo.h6">ЛИЧНЫЕ ДАННЫЕ</MudText>
                
                <MudTextField For="@(() => Form.FIO)" Label="Имя, фамилия" @bind-Value="Form.FIO" Variant="Variant.Filled" />
                <MudTextField For="@(() => Form.Email)" Label="Email" @bind-Value="Form.Email" Variant="Variant.Filled"
                              Validation="@(new EmailAddressAttribute() {ErrorMessage = "Неверный формат email"})" />

                @if (contactMethods != null)
                {
                    <MudSelect @bind-Value="Form.selectedContactMethod" Label="Способ связи" Required="true" RequiredError="Выберите способ связи">
                        @foreach (var cm in contactMethods)
                        {
                            <MudSelectItem Value="cm">@cm.Name</MudSelectItem>
                        }
                    </MudSelect>

                    @if (Form.selectedContactMethod != null && !string.IsNullOrEmpty(Form.selectedContactMethod.ValidationMask))
                    {
                        <MudTextField Label="Контакт" @bind-Value="Form.Contact" Variant="Variant.Filled"
                                      Immediate="true" Error="!Regex.IsMatch(Form.Contact ?? string.Empty, Form.selectedContactMethod.ValidationMask)"
                                      ErrorText="@Form.selectedContactMethod.ValidationErrorText" />
                    }
                }

                @if(deliveryMethods != null)
                {
                    <div class="d-flex" style="gap: 13px;">
                        <div style="gap: 13px;">
                            <MudText Typo="Typo.h6">СПОСОБ ДОСТАВКИ</MudText>
                            <MudRadioGroup Required="true" RequiredError="Выберите способ доставки" @bind-Value="Form.selectedDeliveryMethod">
                                @foreach (var dm in deliveryMethods)
                                {
                                    <MudRadio Value="dm">@dm.Name</MudRadio>
                                }
                            </MudRadioGroup>
                        </div>

                        <div style="gap: 25px;">
                            <MudTextField Label="Город" For="@(() => Form.City)" @bind-Value="Form.City" Variant="Variant.Filled" />
                            <MudTextField Label="Адрес" For="@(() => Form.Address)" @bind-Value="Form.Address" Variant="Variant.Filled" />
                            <MudTextField Label="Регион" For="@(() => Form.Region)" @bind-Value="Form.Region" Variant="Variant.Filled" />
                            <MudTextField Label="Индекс" For="@(() => Form.Index)" @bind-Value="Form.Index" Variant="Variant.Filled" />
                        </div>
                    </div>
                }

                <MudCheckBox T="bool" Label="Я получатель" @bind-Value="Form.IsClientRecipient" />

                @if (!Form.IsClientRecipient)
                {
                    <MudTextField Required="!Form.IsClientRecipient" RequiredError="Обязательно если заберёте не вы" Label="ФИО Получателя" For="@(() => Form.Recipient_FIO)" @bind-Value="Form.Recipient_FIO" Variant="Variant.Filled" />
                    <MudTextField Required="!Form.IsClientRecipient" RequiredError="Обязательно если заберёте не вы" Label="Телефон Получателя" For="@(() => Form.Recipient_Phone)" @bind-Value="Form.Recipient_Phone" Variant="Variant.Filled" />
                }

                @if(paymentMethods != null)
                {
                    <MudText Typo="Typo.h6">СПОСОБ ОПЛАТЫ</MudText>
                    <MudRadioGroup Required="true" RequiredError="Выберите способ оплаты" @bind-Value="Form.selectedPaymentMethod">
                        @foreach (var pm in paymentMethods)
                        {
                            <MudRadio Value="pm">@pm.Name</MudRadio>
                        }
                    </MudRadioGroup>
                }

            </div>
        </MudForm>


        <div class="pa-5 d-flex flex-column" style="gap: 13px; background-color: #F8F8F8; border-radius: 5px;">

            <CartItemsGrid/>

            <MudText Typo="Typo.h6">ЕСЛИ У ВАС ЕСТЬ ПРОМОКОД, ВВЕДИТЕ ЕГО СЮДА</MudText>

            <div class="d-flex" style="gap: 15px;">
                <MudTextField Error="@(!string.IsNullOrEmpty(CartService.PromoCodeError))" ErrorText="@CartService.PromoCodeError" @bind-Value="promo" Placeholder="Введите промокод" />
                <MudButton OnClick="async() => CartService.ApplyPromoCodeAsync(promo)" Variant="Variant.Filled" Color="Color.Primary">ПРИМЕНИТЬ</MudButton>
            </div>

            @if (CartService.AppliedPromoCode != null)
            {
                <div class="d-flex justify-space-between">
                    <MudText Typo="Typo.h6">ОБЩАЯ СТОИМОСТЬ:</MudText>
                    <MudText Typo="Typo.h5" Class="font-weight-bold">@CartService.GetTotalCartPriceWithoutDiscount().ToPreFormatedString() ₽</MudText>
                </div>

                <div class="d-flex justify-space-between">
                    <MudText Typo="Typo.h6">СКИДКА @CartService.AppliedPromoCode.DiscountPercent %:</MudText>
                    <MudText Typo="Typo.h5" Class="font-weight-bold">@CartService.GetTotalDiscount().ToPreFormatedString() ₽</MudText>
                </div>
            }

            <div class="d-flex justify-space-between">
                <MudText Typo="Typo.h6" Class="font-weight-bold">ИТОГО:</MudText>
                <MudText Typo="Typo.h5" Class="font-weight-bold">@CartService.GetTotalCartPrice().ToPreFormatedString() ₽</MudText>
            </div>

            <MudButton @onmouseover="() => {_isFinalButtonHovered = true;}"
                       @onmouseout="() => {_isFinalButtonHovered = false;}"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       Class="py-3"
                       Style=@FinalButtonStyle
                       @onclick="SubmitOrderAsync">ОФОРМИТЬ ЗАКАЗ</MudButton>

            <MudText Typo="Typo.body2" Color="Color.Secondary">
                Оформляя заказ, Вы подтверждаете согласие с <MudLink Href="#">Пользовательским соглашением</MudLink>,<br /><MudLink Href="#">Политикой конфиденциальности</MudLink> и <MudLink Href="#">Договором оферты</MudLink>.
            </MudText>

        </div>
    </div>
</div>




@code {
    private CheckoutForm Form = new();
    private string promo = string.Empty;

    private MudForm checkoutForm;
    private bool isFormValid;

    string[] errors = { };

    private bool _isFinalButtonHovered = false;
    private string FinalButtonStyle =>
    "width: 100%; transition: all 0.6s ease 0s; -webkit-transition: all 0.6s ease 0s; border-radius: 20px; cursor: pointer; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.07); text-transform: uppercase; font-size: 14px; border: none; line-height: 1.5; "
    + (_isFinalButtonHovered ? "color: black; background-color: white;" : "color: white; background-color: black;");

    private IEnumerable<ContactMethod> contactMethods = new List<ContactMethod>();
    private IEnumerable<DeliveryType> deliveryMethods = new List<DeliveryType>();
    private IEnumerable<PaymentType> paymentMethods = new List<PaymentType>();

    private RegexMask GetCurrentRegexMask => new RegexMask($"^{Form.selectedContactMethod.ValidationMask}$");

    private string PromoCodeErrorText = String.Empty;

    protected override async Task OnInitializedAsync()
    {
        contactMethods = await DataProvider.GetContactMethodsAsync();
        deliveryMethods = await DataProvider.GetDeliveryTypesAsync();
        paymentMethods = await DataProvider.GetPaymentTypesAsync();

        if (CartService.CheckoutForm != null)
        {
            Form = CartService.CheckoutForm;

            Form.selectedContactMethod = contactMethods.SingleOrDefault(cm => cm.Id == Form.selectedContactMethod.Id);
            Form.selectedDeliveryMethod = deliveryMethods.SingleOrDefault(dm => dm.Id == Form.selectedDeliveryMethod.Id);
            Form.selectedPaymentMethod = paymentMethods.SingleOrDefault(pm => pm.Id == Form.selectedPaymentMethod.Id);
        }
        if (CartService.AppliedPromoCode != null) promo = CartService.AppliedPromoCode.Code;
        CartService.OnChange += StateHasChanged;
    }

    private async Task SubmitOrderAsync()
    {
        await checkoutForm.Validate();

        if (isFormValid) 
        {
            CartService.SaveCheckoutFormAsync(Form);

            var (isSuccess, message) = await CartService.SubmitOrderAsync(Form);

            if (isSuccess)
            {
                Snackbar.Add("Заказ успешно оформлен!\nМенеджер скоро свяжется с вами для подтверждения.", Severity.Success);
                NavigationManager.NavigateTo("/");
            }
            else
            {
                Snackbar.Add($"Ошибка оформления заказа: {message}", Severity.Error);
            }
        }
        else
        {
            Snackbar.Add("Пожалуйста, заполните все обязательные поля.", Severity.Warning);
        }
    }

    public void Dispose()
    {
        CartService.OnChange -= StateHasChanged;
    }

    public class CheckoutForm
    {
        [Required(ErrorMessage = "ФИО обязательно для заполнения")]
        public string? FIO { get; set; }

        [Required(ErrorMessage = "Email обязателен для заполнения")]
        [EmailAddress(ErrorMessage = "Неверный формат email")]
        public string? Email { get; set; }

        [Required(ErrorMessage = "Контакт обязателен для заполнения")]
        public string? Contact { get; set; }

        [Required(ErrorMessage = "Город обязателен для заполнения")]
        public string? City { get; set; }

        [Required(ErrorMessage = "Адрес обязателен для заполнения")]
        public string? Address { get; set; }

        [Required(ErrorMessage = "Регион обязателен для заполнения")]
        public string? Region { get; set; }

        [Required(ErrorMessage = "Индекс обязателен для заполнения")]
        [StringLength(6, MinimumLength = 6, ErrorMessage = "Индекс должен содержать 6 цифр")]
        public string? Index { get; set; }

        public string? Recipient_FIO { get; set; }

        [Phone(ErrorMessage = "Неверный формат номера телефона получателя")]
        public string? Recipient_Phone { get; set; }

        public bool IsClientRecipient { get; set; } = true;

        public ContactMethod? selectedContactMethod { get; set; }
        public DeliveryType? selectedDeliveryMethod { get; set; }
        public PaymentType? selectedPaymentMethod { get; set; }
    }


}
