@using NMShop.Client.Services
@using NMShop.Client.Components
@implements IDisposable

@inject NavigationManager Navigation
@inject CartService CartService
@inject LayoutService LayoutService

<!-- Overlay with blur -->
<div class="cart-overlay"
     style="@GetOverlayStyle()"
     @onclick="LayoutService.ToggleCart">
</div>

<!-- Cart container -->
<div class="cart-container"
     style="@GetCartContainerStyle()"
     @onclick:stopPropagation>

    <div class="px-4">
        <div class="d-flex justify-space-between align-center mb-3">
            <MudText Typo="Typo.h4">Корзина</MudText>
            <MudIconButton Class="pa-2"
                           Style="height: fit-content;"
                           OnClick="LayoutService.ToggleCart"
                           Icon="@Icons.Material.Filled.Close"
                           Size="Size.Large" />
        </div>

        @if (LayoutService.IsCartOpen)
        {
        <CartItemsGrid />
        }
    </div>

    @if (CartService.Items.Any())
    {
    <div class="cart-footer">
        <div class="total-price">
            <MudText Inline="true" Typo="Typo.h6">ИТОГО:</MudText>
            <MudText Inline="true" Typo="Typo.h5">@CartService.GetTotalCartPrice() ₽</MudText>
        </div>
        <MudText Class="checkout-button"
                 Style="@CheckoutButtonStyle"
                 @onmouseover="() => _isCheckoutButtonHovered = true"
                 @onmouseout="() => _isCheckoutButtonHovered = false"
                 @onclick="GoToCheckOut">
            ОФОРМИТЬ ЗАКАЗ
        </MudText>
    </div>
    }
    else
    {
    <MudText Class="empty-cart">Корзина пуста</MudText>
    }
</div>

@code {
private bool _isCheckoutButtonHovered = false;

private string CheckoutButtonStyle =>
"transition: all 0.6s ease;" +
"border-radius: 20px;" +
"cursor: pointer;" +
"box-shadow: 0 0 10px rgba(0,0,0,0.07);" +
"text-transform: uppercase;" +
"border: none;" +
(_isCheckoutButtonHovered ?
"color: black; background-color: white;" :
"color: white; background-color: black;");

private string GetOverlayStyle() =>
$"position: fixed;" +
$"top: 0;" +
$"left: 0;" +
$"width: 100vw;" +
$"height: 100vh;" +
$"backdrop-filter: blur(4px);" +
$"background: rgba(255,255,255,0.4);" +
$"z-index: {(int)ZEnum.Cart - 1};" +
$"transition: opacity 0.4s, visibility 0.4s;" +
$"opacity: {(LayoutService.IsCartOpen ? "1" : "0")};" +
$"visibility: {(LayoutService.IsCartOpen ? "visible" : "hidden")};";

private string GetCartContainerStyle() =>
$"position: fixed;" +
$"top: 0;" +
$"right: {(LayoutService.IsCartOpen ? "0" : "-800px")};" +
$"width: 800px;" +
$"max-width: 100vw;" +
$"height: 100vh;" +
$"background: white;" +
$"z-index: {(int)ZEnum.Cart};" +
$"transition: right 0.4s ease-in-out;";

protected override void OnInitialized()
{
CartService.OnChange += StateHasChanged;
LayoutService.OnChange += StateHasChanged;
}

public void Dispose()
{
CartService.OnChange -= StateHasChanged;
LayoutService.OnChange -= StateHasChanged;
}

void GoToCheckOut()
{
_isCheckoutButtonHovered = false;
Navigation.NavigateTo("/checkout");
LayoutService.IsCartOpen = false;
}
}

<style>
    .cart-overlay {
        -webkit-backdrop-filter: blur(4px);
    }

    @@media (max-width: 800px) {
        .cart-container {
            width: 100% !important;
        }
    }

    .cart-footer {
        border-top: 1px solid #000;
        padding: 1rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-top: auto;
    }

    .empty-cart {
        margin: 2rem auto;
        text-align: center;
    }

    .checkout-button {
        padding: 0.75rem 1.5rem;
    }
</style>