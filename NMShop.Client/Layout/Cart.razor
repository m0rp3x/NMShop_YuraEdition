@using NMShop.Client.Services;

@implements IDisposable

@inject NavigationManager Navigation;
@inject CartService CartService

@if (CartService.IsCartOpen)
{
    <div class="absolute" style=@($"backdrop-filter: blur(10px); background: linear-gradient(0deg, rgba(0, 0, 0, 0.14), rgba(0, 0, 0, 0.14)), rgba(255, 255, 255, 0.4); width: 100vw; height: 100vh; z-index: {(int)ZEnum.Cart - 1};")>

        <div class="ml-auto d-flex flex-column justify-space-between pt-6" style=@($"width: 800px; max-width: 100vw; height: 100vh; background-color: white; z-index: {(int)ZEnum.Cart};")>

            <div class="px-4">
                <div class="d-flex justify-space-between">
                    <MudText Typo="Typo.h4">Корзина</MudText>

                    <MudIconButton OnClick="CartService.ToggleCart" Icon="@Icons.Material.Filled.Close" Size="Size.Large" />
                </div>

                <div>
                    @foreach (var item in CartService.Items)
                    {
                        <div class="d-flex py-3" style="border-bottom: 1px solid #000000;">

                            <img src="@item.Product.Images.GetMainImageSrc()" style="aspect-ratio: 1 / 0.8; width: 150px; object-position: center; object-fit: cover;" />

                            <div class="cartUnit pl-2">

                                <MudText Typo="Typo.h6">@item.Product.Name</MudText>

                                <MudText Typo="Typo.h6" Style="color: #BDBDBD;">@(item.Product.SizeDisplayType == "string" ? (ClothingSize)(int)item.PriceInfo.Size : item.PriceInfo.Size)</MudText>

                                <MudText Typo="Typo.h6">@item.SubTotal.ToPreFormatedString() ₽</MudText>

                                <div class="d-flex align-center" style="gap: 5px; grid-column: auto / span 2;">

                                    <MudIconButton OnClick="() => CartService.UpdateQuantity(item.Product, item.PriceInfo, item.Quantity - 1)" Icon="@Icons.Material.Filled.Remove" />

                                    <MudText Typo="Typo.h5">@item.Quantity</MudText>

                                    <MudIconButton OnClick="() => CartService.UpdateQuantity(item.Product, item.PriceInfo, item.Quantity + 1)" Icon="@Icons.Material.Filled.Add" />
                                </div>

                                <MudIconButton Style="aspect-ratio: 1/1;" Class="mx-auto" OnClick="() => CartService.RemoveProduct(item.Product, item.PriceInfo)" Icon="@Icons.Material.Filled.DeleteOutline" />
                            </div>
                        </div>
                    }
                </div>
            </div>

            @if(CartService.Items.Count() > 0)
            {
                <div class="d-flex justify-space-between pa-4" style="border-top: 1px solid #000000;">

                    <div>
                        <MudText Inline="true" Typo="Typo.h5">ИТОГО:</MudText>
                        <MudText Inline="true" Typo="Typo.h4">@CartService.GetTotalCartPrice() ₽</MudText>
                    </div>

                    <MudText @onmouseover="() => {_isCheckoutButtonHovered = true;}"
                             @onmouseout="() => {_isCheckoutButtonHovered = false;}"
                             @onclick="GoToCheckOut"
                             Style=@CheckoutButtonStyle
                             Typo="Typo.h5" Class="px-5 py-3">ОФОРМИТЬ ЗАКАЗ</MudText>
                </div>
            }
            else
            {
                <MudText Class="my-4 mx-auto" Typo="Typo.h4">Корзина пуста</MudText>
            }
        </div>
    </div>
}

@code {

    private bool _isCheckoutButtonHovered = false;

    private string CheckoutButtonStyle =>
    "transition: all 0.6s ease 0s; -webkit-transition: all 0.6s ease 0s; border-radius: 20px; cursor: pointer; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.07); text-transform: uppercase; font-size: 14px; border: none; line-height: 1.5; "
    + (_isCheckoutButtonHovered ? "color: black; background-color: white;" : "color: white; background-color: black;");

    protected override void OnInitialized()
    {
        CartService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        CartService.OnChange -= StateHasChanged;
    }

    void GoToCheckOut()
    {
        Navigation.NavigateTo("/checkout");
        CartService.ToggleCart();
    }
}



